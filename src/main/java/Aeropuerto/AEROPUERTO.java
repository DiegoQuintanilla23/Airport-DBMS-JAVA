/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Aeropuerto;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.toedter.calendar.JCalendar;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * El código siguiente define una clase llamada "AEROPUERTO"
 * @author Juan Diego Quintanilla Escalante
 * @date 29/11/2023
 */
public class AEROPUERTO extends javax.swing.JFrame {

    //Cadenas para establecer la conexion con el servidor, se definen en el constructor
    private String HOST = "localhost";
    private String PUERTO = "5432";
    private String DB = "Aeropuerto";
    private String USER = "postgres";
    private String PASS = "postgres";
    public String URL = "jdbc:postgresql://" + HOST + ":" + PUERTO + "/" + DB;
    private Connection CONN = null;
    //Cadena para guardar el ID de un registro que se quiera modificar/eliminar
    public String currentID = "";
    //Cadena para guardar una imagen en bytes, se usa para hacer la lectura y mostrar la imagen en un pictureBox
    public byte[] bytesImagen;
    
    restrictChar listener;
    // Lista con IDs de itinerarios
    List<Integer> listIDItinerario = new ArrayList<>();
    // Lista con IDs de tarjeta pasajero
    List<Integer> listIDTrjetaPasajero = new ArrayList<>();
    //Lista con IDs de asientos para modificacion; guarda ids de asiento que aun no estan ocupados en cierto itinerario
    List<Integer> listIDAsiento = new ArrayList<>();
    //Lista con IDs de asientos de datagridview "Boleto"; guarda ids de asientos de los regsitros boleto
    List<Integer> listIDAsiento2 = new ArrayList<>();
    // Lista con IDs de vuelos
    List<Integer> listIDVuelo = new ArrayList<>();
    // Lista con Nombres de Pilotos
    List<String> listNomPilotos = new ArrayList<>();

    /**
     * Inicializa una nueva instancia de la clase {@link Aeropuerto}.
     * Define los nombres del servidor y la base de datos,
     * y asigna eventos a campos de texto y numéricos para la restricción de caracteres.
     * tambien abre la ventana de login
     */
    public AEROPUERTO() {
        initComponents();
        
        this.listener = new restrictChar();
        tb_NombreAero.addKeyListener(listener);
        tb_ModeloAvion.addKeyListener(listener);
        tb_NombrePiloto.addKeyListener(listener);
        tb_NombreCiudad.addKeyListener(listener);
        tb_PaisCiudad.addKeyListener(listener);
        tb_NombrePasajero.addKeyListener(listener);
        tb_NacionalidadPasajero.addKeyListener(listener);
        tb_NombreTarPasajero.addKeyListener(listener);
        
        abrirVentanaLogin();
        while(USER.equals(""))
        {
            abrirVentanaLogin();
        }
        
        if(USER.equals("pasajero_service"))
        {
            JTP_Ventanas.setSelectedIndex(6);
        }else{
            consultaDatosAerolinea();
        }
    }

    /**
     * Abre la ventana de inicio de sesión.
     * Crea una nueva instancia de la clase {@link Login},
     * la centra en la pantalla y la muestra modalmente.
     * Obtiene el nombre de usuario y la contraseña ingresados.
     */
    private void abrirVentanaLogin() {
        Login ventanaLogin = new Login(this, true);
        ventanaLogin.setLocationRelativeTo(null);  // Centra la ventana en la pantalla
        ventanaLogin.setVisible(true);
        USER = ventanaLogin.getUsr();
        PASS = ventanaLogin.getPass();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JTP_Ventanas = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JT_Aerolinea = new javax.swing.JTable();
        btn_backAerolinea = new javax.swing.JButton();
        btn_Agregar_Aerolinea = new javax.swing.JButton();
        btn_Modificar_Aerolinea = new javax.swing.JButton();
        btn_Eliminar_Aerolinea = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tb_NombreAero = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tb_AnioFAero = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tb_Image = new javax.swing.JTextField();
        btn_Imagen = new javax.swing.JButton();
        lbl_image = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        JT_Avion = new javax.swing.JTable();
        btn_backAvion = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        tb_ModeloAvion = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tb_AnioFAvion = new javax.swing.JTextField();
        JCB_AerolineaAvion = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        JCHBX_ActivoAvion = new javax.swing.JCheckBox();
        btn_Agregar_Avion = new javax.swing.JButton();
        btn_Modificar_Avion = new javax.swing.JButton();
        btn_Eliminar_Avion = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        JT_Piloto = new javax.swing.JTable();
        btn_backPiloto = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        tb_NumLicPiloto = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        JCB_GeneroPiloto = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        tb_NombrePiloto = new javax.swing.JTextField();
        JC_FechaNacPiloto = new com.toedter.calendar.JCalendar();
        jLabel11 = new javax.swing.JLabel();
        btn_Agregar_Piloto = new javax.swing.JButton();
        btn_Modificar_Piloto = new javax.swing.JButton();
        btn_Eliminar_Piloto = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btn_backCiudad = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        tb_NombreCiudad = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        tb_PaisCiudad = new javax.swing.JTextField();
        btn_Agregar_Ciudad = new javax.swing.JButton();
        btn_Modificar_Ciudad = new javax.swing.JButton();
        btn_Eliminar_Ciudad = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        JT_Ciudad = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        JCB_CiudOrgVuelo = new javax.swing.JComboBox<>();
        btn_backVuelo = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        JCB_CiudDestVuelo = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        tb_CostBaseVuelo = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        JS_DuracionVuelo = new javax.swing.JSpinner();
        btn_Agregar_Vuelo = new javax.swing.JButton();
        btn_Modificar_Vuelo = new javax.swing.JButton();
        btn_Eliminar_Vuelo = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        JT_Vuelo = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        JCB_PilotoItinerario = new javax.swing.JComboBox<>();
        btn_backItinerario = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        JCB_AvionItinerario = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        JCB_VueloItinerario = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        JC_FechaVueloItinerario = new com.toedter.calendar.JCalendar();
        btn_Agregar_Itinerario = new javax.swing.JButton();
        btn_Modificar_Itinerario = new javax.swing.JButton();
        btn_Eliminar_Itinerario = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        JT_Itinerario = new javax.swing.JTable();
        TF_HoraSalItinerario = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        btn_backPasajero = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        tb_NombrePasajero = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        tb_NumPassPasajero = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        tb_NacionalidadPasajero = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        JCB_GeneroPasajero = new javax.swing.JComboBox<>();
        jLabel27 = new javax.swing.JLabel();
        tb_NumTelPasajero = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        tb_ContEmergenciaPasajero = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        tb_EmailPasajero = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        JC_FechaNacPasajero = new com.toedter.calendar.JCalendar();
        btn_Agregar_Pasajero = new javax.swing.JButton();
        btn_Modificar_Pasajero = new javax.swing.JButton();
        btn_Eliminar_Pasajero = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        JT_Pasajero = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        btn_backTarPasajero = new javax.swing.JButton();
        btn_Agregar_TarPasajero = new javax.swing.JButton();
        btn_Modificar_TarPasajero = new javax.swing.JButton();
        btn_Eliminar_TarPasajero = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        tb_NombreTarPasajero = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        tb_NumTarPasajero = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        JCB_PasajeroTarPasajero = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        tb_CVVTarPasajero = new javax.swing.JTextField();
        TF_FechaVenTarPasajero = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        JT_TarPasajero = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        btn_backAsiento = new javax.swing.JButton();
        btn_Agregar_Asiento = new javax.swing.JButton();
        btn_Modificar_Asiento = new javax.swing.JButton();
        btn_Eliminar_Asiento = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        JCB_ItinerarioAsiento = new javax.swing.JComboBox<>();
        jLabel37 = new javax.swing.JLabel();
        JCB_LetraAsiento = new javax.swing.JComboBox<>();
        jLabel38 = new javax.swing.JLabel();
        JS_NumAsiento = new javax.swing.JSpinner();
        JCHBX_OcupadoAsiento = new javax.swing.JCheckBox();
        jScrollPane9 = new javax.swing.JScrollPane();
        JT_Asiento = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        btn_backVenta = new javax.swing.JButton();
        btn_Agregar_Venta = new javax.swing.JButton();
        btn_Modificar_Venta = new javax.swing.JButton();
        btn_Eliminar_Venta = new javax.swing.JButton();
        jLabel39 = new javax.swing.JLabel();
        JCB_ItinerarioVenta = new javax.swing.JComboBox<>();
        jLabel40 = new javax.swing.JLabel();
        JS_NumBoletos = new javax.swing.JSpinner();
        jLabel41 = new javax.swing.JLabel();
        JCB_TarjetaVenta = new javax.swing.JComboBox<>();
        JCHBX_PagadoVenta = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        JS_IVABoleto = new javax.swing.JSpinner();
        jLabel44 = new javax.swing.JLabel();
        tb_TSBoleto = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        tb_TSRBoleto = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        JT_Venta = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        jLabel47 = new javax.swing.JLabel();
        JCB_PasajeroBoleto = new javax.swing.JComboBox<>();
        jLabel48 = new javax.swing.JLabel();
        JCB_AsientoBoleto = new javax.swing.JComboBox<>();
        JCHBX_EstadoBoleto = new javax.swing.JCheckBox();
        btn_Modificar_Boleto = new javax.swing.JButton();
        btn_Eliminar_Boleto = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        JT_Boleto = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        JT_R1 = new javax.swing.JTable();
        jLabel49 = new javax.swing.JLabel();
        JCB_PilotoR1 = new javax.swing.JComboBox<>();
        jLabel50 = new javax.swing.JLabel();
        TF_HoraSalIR1 = new javax.swing.JTextField();
        Rep1_consulta = new javax.swing.JButton();
        JC_FechaR1 = new com.toedter.calendar.JCalendar();
        jLabel51 = new javax.swing.JLabel();
        JL_info = new javax.swing.JLabel();
        JL_Count = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        tb_CostBaseR2 = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        JC_FechaR2 = new com.toedter.calendar.JCalendar();
        JCHBX_PagadoR2 = new javax.swing.JCheckBox();
        Rep2_consulta = new javax.swing.JButton();
        jScrollPane13 = new javax.swing.JScrollPane();
        JT_R2 = new javax.swing.JTable();
        JL_info1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lbl_Modifica = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        JTP_Ventanas.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                JTP_VentanasStateChanged(evt);
            }
        });

        JT_Aerolinea.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idAerolínea", "Nombre Aerolínea", "Flota Total", "Año Fundación", "Número de Vuelos", "Logotipo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_Aerolinea.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        JT_Aerolinea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JT_AerolineaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JT_Aerolinea);
        if (JT_Aerolinea.getColumnModel().getColumnCount() > 0) {
            JT_Aerolinea.getColumnModel().getColumn(0).setResizable(false);
            JT_Aerolinea.getColumnModel().getColumn(1).setResizable(false);
            JT_Aerolinea.getColumnModel().getColumn(2).setResizable(false);
            JT_Aerolinea.getColumnModel().getColumn(3).setResizable(false);
            JT_Aerolinea.getColumnModel().getColumn(4).setResizable(false);
        }

        btn_backAerolinea.setText("Cancelar");
        btn_backAerolinea.setEnabled(false);
        btn_backAerolinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backAerolineaActionPerformed(evt);
            }
        });

        btn_Agregar_Aerolinea.setText("Agregar");
        btn_Agregar_Aerolinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Agregar_AerolineaActionPerformed(evt);
            }
        });

        btn_Modificar_Aerolinea.setText("Modificar");
        btn_Modificar_Aerolinea.setEnabled(false);
        btn_Modificar_Aerolinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Modificar_AerolineaActionPerformed(evt);
            }
        });

        btn_Eliminar_Aerolinea.setText("Eliminar");
        btn_Eliminar_Aerolinea.setEnabled(false);
        btn_Eliminar_Aerolinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eliminar_AerolineaActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre Aerolínea");
        jLabel2.setToolTipText("");

        jLabel3.setText("Año Fundación");

        tb_AnioFAero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tb_AnioFAeroKeyTyped(evt);
            }
        });

        jLabel4.setText("Logotipo");

        tb_Image.setEnabled(false);

        btn_Imagen.setText("Subir Archivo");
        btn_Imagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ImagenActionPerformed(evt);
            }
        });

        lbl_image.setText("Imagen");
        lbl_image.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 811, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_Agregar_Aerolinea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_Modificar_Aerolinea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_Eliminar_Aerolinea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tb_NombreAero)
                            .addComponent(tb_AnioFAero)
                            .addComponent(btn_Imagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tb_Image)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 351, Short.MAX_VALUE))
                            .addComponent(btn_backAerolinea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(lbl_image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_backAerolinea)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_NombreAero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_AnioFAero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_Image, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Imagen)
                        .addGap(29, 29, 29)
                        .addComponent(btn_Agregar_Aerolinea)
                        .addGap(18, 18, 18)
                        .addComponent(btn_Modificar_Aerolinea)
                        .addGap(18, 18, 18)
                        .addComponent(btn_Eliminar_Aerolinea)
                        .addGap(38, 38, 38)
                        .addComponent(lbl_image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        JTP_Ventanas.addTab("Aerolinea", jPanel1);

        JT_Avion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idAvión", "Aerolínea", "Capacidad", "Modelo", "Año de Fabricación", "Activo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_Avion.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        JT_Avion.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        JT_Avion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JT_AvionMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(JT_Avion);
        if (JT_Avion.getColumnModel().getColumnCount() > 0) {
            JT_Avion.getColumnModel().getColumn(0).setResizable(false);
            JT_Avion.getColumnModel().getColumn(0).setHeaderValue("idAvión");
            JT_Avion.getColumnModel().getColumn(1).setResizable(false);
            JT_Avion.getColumnModel().getColumn(1).setHeaderValue("Aerolínea");
            JT_Avion.getColumnModel().getColumn(2).setResizable(false);
            JT_Avion.getColumnModel().getColumn(2).setHeaderValue("Capacidad");
            JT_Avion.getColumnModel().getColumn(3).setResizable(false);
            JT_Avion.getColumnModel().getColumn(3).setHeaderValue("Modelo");
            JT_Avion.getColumnModel().getColumn(4).setResizable(false);
            JT_Avion.getColumnModel().getColumn(4).setHeaderValue("Año de Fabricación");
            JT_Avion.getColumnModel().getColumn(5).setResizable(false);
            JT_Avion.getColumnModel().getColumn(5).setHeaderValue("Activo");
        }

        btn_backAvion.setText("Cancelar");
        btn_backAvion.setEnabled(false);
        btn_backAvion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backAvionActionPerformed(evt);
            }
        });

        jLabel5.setText("Modelo");
        jLabel5.setToolTipText("");

        jLabel6.setText("Año de Fabricación");

        tb_AnioFAvion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tb_AnioFAvionKeyTyped(evt);
            }
        });

        JCB_AerolineaAvion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText("Aerolínea");

        JCHBX_ActivoAvion.setText("Activo");

        btn_Agregar_Avion.setText("Agregar");
        btn_Agregar_Avion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Agregar_AvionActionPerformed(evt);
            }
        });

        btn_Modificar_Avion.setText("Modificar");
        btn_Modificar_Avion.setEnabled(false);
        btn_Modificar_Avion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Modificar_AvionActionPerformed(evt);
            }
        });

        btn_Eliminar_Avion.setText("Eliminar");
        btn_Eliminar_Avion.setEnabled(false);
        btn_Eliminar_Avion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eliminar_AvionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 937, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JCB_AerolineaAvion, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JCHBX_ActivoAvion, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_backAvion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tb_ModeloAvion)
                    .addComponent(tb_AnioFAvion)
                    .addComponent(btn_Agregar_Avion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_Modificar_Avion, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                    .addComponent(btn_Eliminar_Avion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btn_backAvion)
                        .addGap(42, 42, 42)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_ModeloAvion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_AnioFAvion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCB_AerolineaAvion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(JCHBX_ActivoAvion)
                        .addGap(46, 46, 46)
                        .addComponent(btn_Agregar_Avion)
                        .addGap(18, 18, 18)
                        .addComponent(btn_Modificar_Avion)
                        .addGap(18, 18, 18)
                        .addComponent(btn_Eliminar_Avion)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)))
        );

        JTP_Ventanas.addTab("Avión", jPanel2);

        JT_Piloto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idPiloto", "Nombre Piloto", "Género", "Fecha de Nacimiento", "Número de licencia"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_Piloto.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        JT_Piloto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JT_PilotoMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(JT_Piloto);
        if (JT_Piloto.getColumnModel().getColumnCount() > 0) {
            JT_Piloto.getColumnModel().getColumn(0).setResizable(false);
            JT_Piloto.getColumnModel().getColumn(1).setResizable(false);
            JT_Piloto.getColumnModel().getColumn(2).setResizable(false);
            JT_Piloto.getColumnModel().getColumn(3).setResizable(false);
            JT_Piloto.getColumnModel().getColumn(4).setResizable(false);
        }

        btn_backPiloto.setText("Cancelar");
        btn_backPiloto.setEnabled(false);
        btn_backPiloto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backPilotoActionPerformed(evt);
            }
        });

        jLabel8.setText("Número de Licencia");

        tb_NumLicPiloto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tb_NumLicPilotoKeyTyped(evt);
            }
        });

        jLabel9.setText("Género");

        JCB_GeneroPiloto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel10.setText("Nombre Piloto");
        jLabel10.setToolTipText("");

        jLabel11.setText("Fecha de Nacimiento");

        btn_Agregar_Piloto.setText("Agregar");
        btn_Agregar_Piloto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Agregar_PilotoActionPerformed(evt);
            }
        });

        btn_Modificar_Piloto.setText("Modificar");
        btn_Modificar_Piloto.setEnabled(false);
        btn_Modificar_Piloto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Modificar_PilotoActionPerformed(evt);
            }
        });

        btn_Eliminar_Piloto.setText("Eliminar");
        btn_Eliminar_Piloto.setEnabled(false);
        btn_Eliminar_Piloto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eliminar_PilotoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 906, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tb_NombrePiloto)
                    .addComponent(tb_NumLicPiloto)
                    .addComponent(JC_FechaNacPiloto, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JCB_GeneroPiloto, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btn_Agregar_Piloto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_Modificar_Piloto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_Eliminar_Piloto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_backPiloto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btn_backPiloto)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_NombrePiloto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_NumLicPiloto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCB_GeneroPiloto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JC_FechaNacPiloto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_Agregar_Piloto)
                        .addGap(18, 18, 18)
                        .addComponent(btn_Modificar_Piloto)
                        .addGap(18, 18, 18)
                        .addComponent(btn_Eliminar_Piloto)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        JTP_Ventanas.addTab("Piloto", jPanel3);

        btn_backCiudad.setText("Cancelar");
        btn_backCiudad.setEnabled(false);
        btn_backCiudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backCiudadActionPerformed(evt);
            }
        });

        jLabel12.setText("Nombre Ciudad");
        jLabel12.setToolTipText("");

        jLabel13.setText("País");
        jLabel13.setToolTipText("");

        btn_Agregar_Ciudad.setText("Agregar");
        btn_Agregar_Ciudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Agregar_CiudadActionPerformed(evt);
            }
        });

        btn_Modificar_Ciudad.setText("Modificar");
        btn_Modificar_Ciudad.setEnabled(false);
        btn_Modificar_Ciudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Modificar_CiudadActionPerformed(evt);
            }
        });

        btn_Eliminar_Ciudad.setText("Eliminar");
        btn_Eliminar_Ciudad.setEnabled(false);
        btn_Eliminar_Ciudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eliminar_CiudadActionPerformed(evt);
            }
        });

        JT_Ciudad.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idCiudad", "Nombre Ciudad", "País"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_Ciudad.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        JT_Ciudad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JT_CiudadMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(JT_Ciudad);
        if (JT_Ciudad.getColumnModel().getColumnCount() > 0) {
            JT_Ciudad.getColumnModel().getColumn(0).setResizable(false);
            JT_Ciudad.getColumnModel().getColumn(1).setResizable(false);
            JT_Ciudad.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 945, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_backCiudad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tb_NombreCiudad)
                    .addComponent(tb_PaisCiudad)
                    .addComponent(btn_Agregar_Ciudad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_Modificar_Ciudad, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                    .addComponent(btn_Eliminar_Ciudad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btn_backCiudad)
                        .addGap(72, 72, 72)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_NombreCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_PaisCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(btn_Agregar_Ciudad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Modificar_Ciudad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Eliminar_Ciudad)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        JTP_Ventanas.addTab("Ciudad", jPanel5);

        jLabel14.setText("Ciudad Origen");

        JCB_CiudOrgVuelo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btn_backVuelo.setText("Cancelar");
        btn_backVuelo.setEnabled(false);
        btn_backVuelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backVueloActionPerformed(evt);
            }
        });

        jLabel15.setText("Ciudad Destino");

        JCB_CiudDestVuelo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel16.setText("Costo Base");

        tb_CostBaseVuelo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tb_CostBaseVueloKeyTyped(evt);
            }
        });

        jLabel17.setText("Duración (Horas)");

        JS_DuracionVuelo.setModel(new javax.swing.SpinnerNumberModel(1, 1, 20, 1));

        btn_Agregar_Vuelo.setText("Agregar");
        btn_Agregar_Vuelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Agregar_VueloActionPerformed(evt);
            }
        });

        btn_Modificar_Vuelo.setText("Modificar");
        btn_Modificar_Vuelo.setEnabled(false);
        btn_Modificar_Vuelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Modificar_VueloActionPerformed(evt);
            }
        });

        btn_Eliminar_Vuelo.setText("Eliminar");
        btn_Eliminar_Vuelo.setEnabled(false);
        btn_Eliminar_Vuelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eliminar_VueloActionPerformed(evt);
            }
        });

        JT_Vuelo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idVuelo", "Ciudad Origen", "Ciudad Destino", "Duración (Horas)", "Costo Base"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_Vuelo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        JT_Vuelo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JT_VueloMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(JT_Vuelo);
        if (JT_Vuelo.getColumnModel().getColumnCount() > 0) {
            JT_Vuelo.getColumnModel().getColumn(0).setResizable(false);
            JT_Vuelo.getColumnModel().getColumn(1).setResizable(false);
            JT_Vuelo.getColumnModel().getColumn(2).setResizable(false);
            JT_Vuelo.getColumnModel().getColumn(3).setResizable(false);
            JT_Vuelo.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 951, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(JCB_CiudDestVuelo, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(JCB_CiudOrgVuelo, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_backVuelo, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(JS_DuracionVuelo, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tb_CostBaseVuelo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btn_Agregar_Vuelo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_Modificar_Vuelo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_Eliminar_Vuelo, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(btn_backVuelo)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCB_CiudOrgVuelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCB_CiudDestVuelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_CostBaseVuelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JS_DuracionVuelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(btn_Agregar_Vuelo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Modificar_Vuelo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Eliminar_Vuelo)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        JTP_Ventanas.addTab("Vuelo", jPanel6);

        jLabel18.setText("Piloto");

        JCB_PilotoItinerario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btn_backItinerario.setText("Cancelar");
        btn_backItinerario.setEnabled(false);
        btn_backItinerario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backItinerarioActionPerformed(evt);
            }
        });

        jLabel19.setText("Avión");

        JCB_AvionItinerario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel20.setText("Vuelo");

        JCB_VueloItinerario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel21.setText("Hora de Salida");

        jLabel22.setText("Fecha del Vuelo");

        btn_Agregar_Itinerario.setText("Agregar");
        btn_Agregar_Itinerario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Agregar_ItinerarioActionPerformed(evt);
            }
        });

        btn_Modificar_Itinerario.setText("Modificar");
        btn_Modificar_Itinerario.setEnabled(false);
        btn_Modificar_Itinerario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Modificar_ItinerarioActionPerformed(evt);
            }
        });

        btn_Eliminar_Itinerario.setText("Eliminar");
        btn_Eliminar_Itinerario.setEnabled(false);
        btn_Eliminar_Itinerario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eliminar_ItinerarioActionPerformed(evt);
            }
        });

        JT_Itinerario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idItinerario", "Piloto", "Avión", "Vuelo", "Hora de Salida", "Fecha del Vuelo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_Itinerario.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        JT_Itinerario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JT_ItinerarioMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(JT_Itinerario);
        if (JT_Itinerario.getColumnModel().getColumnCount() > 0) {
            JT_Itinerario.getColumnModel().getColumn(0).setResizable(false);
            JT_Itinerario.getColumnModel().getColumn(0).setPreferredWidth(5);
            JT_Itinerario.getColumnModel().getColumn(1).setResizable(false);
            JT_Itinerario.getColumnModel().getColumn(2).setResizable(false);
            JT_Itinerario.getColumnModel().getColumn(3).setResizable(false);
            JT_Itinerario.getColumnModel().getColumn(4).setResizable(false);
            JT_Itinerario.getColumnModel().getColumn(4).setPreferredWidth(10);
            JT_Itinerario.getColumnModel().getColumn(5).setResizable(false);
        }

        TF_HoraSalItinerario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TF_HoraSalItinerarioKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 916, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_backItinerario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(JC_FechaVueloItinerario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TF_HoraSalItinerario)
                                            .addComponent(JCB_VueloItinerario, 0, 288, Short.MAX_VALUE)
                                            .addComponent(JCB_AvionItinerario, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(JCB_PilotoItinerario, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(0, 73, Short.MAX_VALUE)))
                                .addContainerGap())))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_Eliminar_Itinerario, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btn_Modificar_Itinerario, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btn_Agregar_Itinerario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btn_backItinerario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCB_PilotoItinerario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCB_AvionItinerario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCB_VueloItinerario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TF_HoraSalItinerario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JC_FechaVueloItinerario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                        .addComponent(btn_Agregar_Itinerario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Modificar_Itinerario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Eliminar_Itinerario)
                        .addGap(37, 37, 37))))
        );

        JTP_Ventanas.addTab("Itinerario", jPanel7);

        btn_backPasajero.setText("Cancelar");
        btn_backPasajero.setEnabled(false);
        btn_backPasajero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backPasajeroActionPerformed(evt);
            }
        });

        jLabel23.setText("Nombre Pasajero");
        jLabel23.setToolTipText("");

        jLabel24.setText("Número de Pasaporte");

        tb_NumPassPasajero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tb_NumPassPasajeroKeyTyped(evt);
            }
        });

        jLabel25.setText("Nacionalidad");
        jLabel25.setToolTipText("");

        jLabel26.setText("Género");

        JCB_GeneroPasajero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel27.setText("Teléfono");

        tb_NumTelPasajero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tb_NumTelPasajeroKeyTyped(evt);
            }
        });

        jLabel28.setText("Contacto de Emergencia");

        tb_ContEmergenciaPasajero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tb_ContEmergenciaPasajeroKeyTyped(evt);
            }
        });

        jLabel29.setText("Email");
        jLabel29.setToolTipText("");

        jLabel30.setText("Fecha de Nacimiento");

        btn_Agregar_Pasajero.setText("Agregar");
        btn_Agregar_Pasajero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Agregar_PasajeroActionPerformed(evt);
            }
        });

        btn_Modificar_Pasajero.setText("Modificar");
        btn_Modificar_Pasajero.setEnabled(false);
        btn_Modificar_Pasajero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Modificar_PasajeroActionPerformed(evt);
            }
        });

        btn_Eliminar_Pasajero.setText("Eliminar");
        btn_Eliminar_Pasajero.setEnabled(false);
        btn_Eliminar_Pasajero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eliminar_PasajeroActionPerformed(evt);
            }
        });

        JT_Pasajero.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idPasajero", "Nombre del Pasajero", "Fecha de Nacimiento", "Edad", "Nacionalidad", "Género", "Número de Pasaporte", "Teléfono", "Contacto de Emergencia", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_Pasajero.setColumnSelectionAllowed(true);
        JT_Pasajero.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JT_PasajeroMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(JT_Pasajero);
        JT_Pasajero.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (JT_Pasajero.getColumnModel().getColumnCount() > 0) {
            JT_Pasajero.getColumnModel().getColumn(0).setResizable(false);
            JT_Pasajero.getColumnModel().getColumn(1).setResizable(false);
            JT_Pasajero.getColumnModel().getColumn(2).setResizable(false);
            JT_Pasajero.getColumnModel().getColumn(3).setResizable(false);
            JT_Pasajero.getColumnModel().getColumn(4).setResizable(false);
            JT_Pasajero.getColumnModel().getColumn(5).setResizable(false);
            JT_Pasajero.getColumnModel().getColumn(6).setResizable(false);
            JT_Pasajero.getColumnModel().getColumn(7).setResizable(false);
            JT_Pasajero.getColumnModel().getColumn(8).setResizable(false);
            JT_Pasajero.getColumnModel().getColumn(9).setResizable(false);
        }

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tb_NombrePasajero, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tb_NacionalidadPasajero)
                                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(JCB_GeneroPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(tb_ContEmergenciaPasajero, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tb_NumPassPasajero, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tb_NumTelPasajero, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                                .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tb_EmailPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel30))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 263, Short.MAX_VALUE)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btn_Modificar_Pasajero, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                                    .addComponent(btn_Agregar_Pasajero, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn_backPasajero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn_Eliminar_Pasajero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(JC_FechaNacPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23)
                            .addComponent(jLabel29))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tb_NombrePasajero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tb_EmailPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(jLabel30))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(tb_NacionalidadPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JCB_GeneroPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tb_NumPassPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel27)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tb_NumTelPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel28)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tb_ContEmergenciaPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(JC_FechaNacPasajero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addComponent(btn_backPasajero)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_Agregar_Pasajero)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Modificar_Pasajero)
                        .addGap(7, 7, 7)
                        .addComponent(btn_Eliminar_Pasajero)
                        .addGap(38, 38, 38)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        JTP_Ventanas.addTab("Pasajero", jPanel8);

        btn_backTarPasajero.setText("Cancelar");
        btn_backTarPasajero.setEnabled(false);
        btn_backTarPasajero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backTarPasajeroActionPerformed(evt);
            }
        });

        btn_Agregar_TarPasajero.setText("Agregar");
        btn_Agregar_TarPasajero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Agregar_TarPasajeroActionPerformed(evt);
            }
        });

        btn_Modificar_TarPasajero.setText("Modificar");
        btn_Modificar_TarPasajero.setEnabled(false);
        btn_Modificar_TarPasajero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Modificar_TarPasajeroActionPerformed(evt);
            }
        });

        btn_Eliminar_TarPasajero.setText("Eliminar");
        btn_Eliminar_TarPasajero.setEnabled(false);
        btn_Eliminar_TarPasajero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eliminar_TarPasajeroActionPerformed(evt);
            }
        });

        jLabel31.setText("Nombre del Titular");
        jLabel31.setToolTipText("");

        jLabel32.setText("Número de Tarjeta");

        tb_NumTarPasajero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tb_NumTarPasajeroKeyTyped(evt);
            }
        });

        jLabel33.setText("Pasajero");

        JCB_PasajeroTarPasajero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel34.setText("Fecha de Vencimiento");

        jLabel35.setText("CVV");
        jLabel35.setToolTipText("");

        tb_CVVTarPasajero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tb_CVVTarPasajeroKeyTyped(evt);
            }
        });

        TF_FechaVenTarPasajero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TF_FechaVenTarPasajeroKeyTyped(evt);
            }
        });

        JT_TarPasajero.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idTarjetaPasajero", "Pasajero", "Nombre del Titular", "Banco", "Número de Tarjeta", "Fecha de Vencimiento", "CVV"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_TarPasajero.setColumnSelectionAllowed(true);
        JT_TarPasajero.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JT_TarPasajeroMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(JT_TarPasajero);
        JT_TarPasajero.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (JT_TarPasajero.getColumnModel().getColumnCount() > 0) {
            JT_TarPasajero.getColumnModel().getColumn(0).setResizable(false);
            JT_TarPasajero.getColumnModel().getColumn(1).setResizable(false);
            JT_TarPasajero.getColumnModel().getColumn(2).setResizable(false);
            JT_TarPasajero.getColumnModel().getColumn(3).setResizable(false);
            JT_TarPasajero.getColumnModel().getColumn(4).setResizable(false);
            JT_TarPasajero.getColumnModel().getColumn(5).setResizable(false);
            JT_TarPasajero.getColumnModel().getColumn(6).setResizable(false);
        }

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 915, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btn_backTarPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel9Layout.createSequentialGroup()
                                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btn_Modificar_TarPasajero, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                                        .addComponent(btn_Agregar_TarPasajero, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(16, 16, 16)))
                            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(JCB_PasajeroTarPasajero, javax.swing.GroupLayout.Alignment.LEADING, 0, 346, Short.MAX_VALUE)
                                .addComponent(tb_CVVTarPasajero, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tb_NumTarPasajero, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tb_NombreTarPasajero, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGroup(jPanel9Layout.createSequentialGroup()
                            .addComponent(TF_FechaVenTarPasajero)
                            .addGap(16, 16, 16)))
                    .addComponent(btn_Eliminar_TarPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(btn_backTarPasajero)
                        .addGap(23, 23, 23)
                        .addComponent(jLabel33)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCB_PasajeroTarPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_NombreTarPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_NumTarPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_CVVTarPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TF_FechaVenTarPasajero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(btn_Agregar_TarPasajero)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Modificar_TarPasajero)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Eliminar_TarPasajero)
                        .addGap(0, 182, Short.MAX_VALUE))
                    .addComponent(jScrollPane8))
                .addContainerGap())
        );

        JTP_Ventanas.addTab("Tarjeta Pasajero", jPanel9);

        btn_backAsiento.setText("Cancelar");
        btn_backAsiento.setEnabled(false);
        btn_backAsiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backAsientoActionPerformed(evt);
            }
        });

        btn_Agregar_Asiento.setText("Agregar");
        btn_Agregar_Asiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Agregar_AsientoActionPerformed(evt);
            }
        });

        btn_Modificar_Asiento.setText("Modificar");
        btn_Modificar_Asiento.setEnabled(false);
        btn_Modificar_Asiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Modificar_AsientoActionPerformed(evt);
            }
        });

        btn_Eliminar_Asiento.setText("Eliminar");
        btn_Eliminar_Asiento.setEnabled(false);
        btn_Eliminar_Asiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eliminar_AsientoActionPerformed(evt);
            }
        });

        jLabel36.setText("Itinerario");

        JCB_ItinerarioAsiento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel37.setText("Letra");

        JCB_LetraAsiento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel38.setText("Número de Asiento");

        JS_NumAsiento.setModel(new javax.swing.SpinnerNumberModel(1, 1, 4, 1));

        JCHBX_OcupadoAsiento.setText("Ocupado");

        JT_Asiento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idAsiento", "Itinerario", "Número de Asiento", "Letra", "Ocupado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_Asiento.setColumnSelectionAllowed(true);
        JT_Asiento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JT_AsientoMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(JT_Asiento);
        JT_Asiento.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (JT_Asiento.getColumnModel().getColumnCount() > 0) {
            JT_Asiento.getColumnModel().getColumn(0).setResizable(false);
            JT_Asiento.getColumnModel().getColumn(0).setPreferredWidth(5);
            JT_Asiento.getColumnModel().getColumn(1).setResizable(false);
            JT_Asiento.getColumnModel().getColumn(1).setPreferredWidth(80);
            JT_Asiento.getColumnModel().getColumn(2).setResizable(false);
            JT_Asiento.getColumnModel().getColumn(2).setPreferredWidth(5);
            JT_Asiento.getColumnModel().getColumn(3).setResizable(false);
            JT_Asiento.getColumnModel().getColumn(3).setPreferredWidth(5);
            JT_Asiento.getColumnModel().getColumn(4).setResizable(false);
            JT_Asiento.getColumnModel().getColumn(4).setPreferredWidth(5);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 915, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JCHBX_OcupadoAsiento, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btn_backAsiento, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btn_Modificar_Asiento, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btn_Agregar_Asiento, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(16, 16, 16)))
                            .addComponent(btn_Eliminar_Asiento, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(JCB_ItinerarioAsiento, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(JCB_LetraAsiento, javax.swing.GroupLayout.Alignment.LEADING, 0, 192, Short.MAX_VALUE)
                        .addComponent(JS_NumAsiento, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btn_backAsiento)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel36)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCB_ItinerarioAsiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JS_NumAsiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel37)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCB_LetraAsiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCHBX_OcupadoAsiento)
                        .addGap(148, 148, 148)
                        .addComponent(btn_Agregar_Asiento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Modificar_Asiento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Eliminar_Asiento)
                        .addGap(0, 182, Short.MAX_VALUE))
                    .addComponent(jScrollPane9))
                .addContainerGap())
        );

        JTP_Ventanas.addTab("Asiento", jPanel4);

        btn_backVenta.setText("Cancelar");
        btn_backVenta.setEnabled(false);
        btn_backVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backVentaActionPerformed(evt);
            }
        });

        btn_Agregar_Venta.setText("Agregar");
        btn_Agregar_Venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Agregar_VentaActionPerformed(evt);
            }
        });

        btn_Modificar_Venta.setText("Modificar");
        btn_Modificar_Venta.setEnabled(false);
        btn_Modificar_Venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Modificar_VentaActionPerformed(evt);
            }
        });

        btn_Eliminar_Venta.setText("Eliminar");
        btn_Eliminar_Venta.setEnabled(false);
        btn_Eliminar_Venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eliminar_VentaActionPerformed(evt);
            }
        });

        jLabel39.setText("Itinerario");

        JCB_ItinerarioVenta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel40.setText("Número de Boletos");

        JS_NumBoletos.setModel(new javax.swing.SpinnerNumberModel(1, 1, 8, 1));

        jLabel41.setText("Tarjeta");

        JCB_TarjetaVenta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        JCHBX_PagadoVenta.setText("Pagado");

        jLabel42.setText("Boletos");

        jLabel43.setText("IVA");

        JS_IVABoleto.setModel(new javax.swing.SpinnerNumberModel(1, 1, 100, 1));
        JS_IVABoleto.setValue(16);

        jLabel44.setText("Tasa de Seguridad");

        tb_TSBoleto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tb_TSBoletoKeyTyped(evt);
            }
        });

        jLabel45.setText("Tasa de Servicio");

        tb_TSRBoleto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tb_TSRBoletoKeyTyped(evt);
            }
        });

        jLabel46.setText("%");

        JT_Venta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idVenta", "Tarjeta del Pasajero", "Itinerario", "Fecha de Venta", "Monto Total", "Pagado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_Venta.setColumnSelectionAllowed(true);
        JT_Venta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JT_VentaMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(JT_Venta);
        JT_Venta.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (JT_Venta.getColumnModel().getColumnCount() > 0) {
            JT_Venta.getColumnModel().getColumn(0).setPreferredWidth(2);
            JT_Venta.getColumnModel().getColumn(1).setPreferredWidth(20);
            JT_Venta.getColumnModel().getColumn(2).setPreferredWidth(20);
            JT_Venta.getColumnModel().getColumn(5).setPreferredWidth(2);
        }

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 919, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(127, 127, 127))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btn_Modificar_Venta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btn_Agregar_Venta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btn_Eliminar_Venta, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 22, Short.MAX_VALUE))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSeparator1)
                                    .addComponent(btn_backVenta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel10Layout.createSequentialGroup()
                                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel10Layout.createSequentialGroup()
                                                .addComponent(JS_IVABoleto, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(tb_TSRBoleto, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tb_TSBoleto, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(JCHBX_PagadoVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(JS_NumBoletos, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(JCB_TarjetaVenta, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(JCB_ItinerarioVenta, javax.swing.GroupLayout.Alignment.LEADING, 0, 319, Short.MAX_VALUE)))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())))))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(btn_backVenta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCB_TarjetaVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCB_ItinerarioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCHBX_PagadoVenta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel42)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JS_NumBoletos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel43)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JS_IVABoleto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel46))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel44)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_TSBoleto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel45)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_TSRBoleto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(btn_Agregar_Venta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Modificar_Venta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Eliminar_Venta)
                        .addGap(0, 68, Short.MAX_VALUE))
                    .addComponent(jScrollPane10))
                .addContainerGap())
        );

        JTP_Ventanas.addTab("Venta", jPanel10);

        jLabel47.setText("Pasajero");

        JCB_PasajeroBoleto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel48.setText("Asiento");

        JCB_AsientoBoleto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        JCHBX_EstadoBoleto.setText("Pagado");

        btn_Modificar_Boleto.setText("Modificar");
        btn_Modificar_Boleto.setEnabled(false);
        btn_Modificar_Boleto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Modificar_BoletoActionPerformed(evt);
            }
        });

        btn_Eliminar_Boleto.setText("Eliminar");
        btn_Eliminar_Boleto.setEnabled(false);
        btn_Eliminar_Boleto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Eliminar_BoletoActionPerformed(evt);
            }
        });

        JT_Boleto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idBoleto", "Venta", "Pasajero", "Asiento", "Impuestos", "Tarifas Adicionales", "Costo Total", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_Boleto.setColumnSelectionAllowed(true);
        JT_Boleto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JT_BoletoMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(JT_Boleto);
        JT_Boleto.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (JT_Boleto.getColumnModel().getColumnCount() > 0) {
            JT_Boleto.getColumnModel().getColumn(0).setPreferredWidth(2);
            JT_Boleto.getColumnModel().getColumn(1).setPreferredWidth(2);
            JT_Boleto.getColumnModel().getColumn(2).setPreferredWidth(30);
            JT_Boleto.getColumnModel().getColumn(3).setPreferredWidth(30);
        }

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 958, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(JCHBX_EstadoBoleto, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JCB_AsientoBoleto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_Eliminar_Boleto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_Modificar_Boleto, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addComponent(JCB_PasajeroBoleto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(60, 60, 60))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(jLabel47)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JCB_PasajeroBoleto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel48)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JCB_AsientoBoleto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(JCHBX_EstadoBoleto)
                .addGap(73, 73, 73)
                .addComponent(btn_Modificar_Boleto)
                .addGap(18, 18, 18)
                .addComponent(btn_Eliminar_Boleto)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                .addContainerGap())
        );

        JTP_Ventanas.addTab("Boleto", jPanel11);

        JT_R1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre del Piloto", "Hora Salida", "Fecha", "Modelo del Avion", "Duracion Horas", "Costo Base"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane12.setViewportView(JT_R1);

        jLabel49.setText("Selecciona un Piloto:");

        JCB_PilotoR1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel50.setText("Mayor a esta hora:");

        TF_HoraSalIR1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TF_HoraSalIR1KeyTyped(evt);
            }
        });

        Rep1_consulta.setText("Consultar");
        Rep1_consulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Rep1_consultaActionPerformed(evt);
            }
        });

        jLabel51.setText("A Partir de:");

        JL_info.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        JL_info.setText(" Información acerca del vuelo e itinerario de cierto piloto a partir de cierta fecha y hora");

        JL_Count.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        JL_Count.setText(" ");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(JL_info, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 1030, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JCB_PilotoR1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Rep1_consulta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JC_FechaR1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(TF_HoraSalIR1)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(JL_Count, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JL_info, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel49)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCB_PilotoR1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel51)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JC_FechaR1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel50)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TF_HoraSalIR1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(JL_Count)
                        .addGap(47, 47, 47)
                        .addComponent(Rep1_consulta)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jScrollPane12)
                        .addContainerGap())))
        );

        JTP_Ventanas.addTab("Reporte 1", jPanel12);

        jLabel52.setText("Costo Mayor a:");

        tb_CostBaseR2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tb_CostBaseR2KeyTyped(evt);
            }
        });

        jLabel53.setText("A Partir de:");

        JCHBX_PagadoR2.setText("Pagado?");

        Rep2_consulta.setText("Consultar");
        Rep2_consulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Rep2_consultaActionPerformed(evt);
            }
        });

        JT_R2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Titular", "Monto Total", "Fecha Venta", "Itinerario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane13.setViewportView(JT_R2);
        if (JT_R2.getColumnModel().getColumnCount() > 0) {
            JT_R2.getColumnModel().getColumn(1).setPreferredWidth(5);
            JT_R2.getColumnModel().getColumn(3).setPreferredWidth(50);
        }

        JL_info1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        JL_info1.setText(" Información acerca de la venta e itinerario dependiendo del estado de pago a partir de cierto costo y fecha de venta");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 1035, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(JCHBX_PagadoR2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(Rep2_consulta, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(JC_FechaR2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                                    .addComponent(tb_CostBaseR2, javax.swing.GroupLayout.Alignment.LEADING))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(JL_info1, javax.swing.GroupLayout.PREFERRED_SIZE, 1288, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 13, Short.MAX_VALUE))))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JL_info1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel52)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_CostBaseR2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel53)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JC_FechaR2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCHBX_PagadoR2)
                        .addGap(71, 71, 71)
                        .addComponent(Rep2_consulta)
                        .addContainerGap(183, Short.MAX_VALUE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jScrollPane13)
                        .addContainerGap())))
        );

        JTP_Ventanas.addTab("Reporte 2", jPanel13);

        jLabel1.setText("Sistema Aeropuerto");

        lbl_Modifica.setText("• Modificación / Eliminación");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_Modifica, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104))
            .addComponent(JTP_Ventanas)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_Modifica, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JTP_Ventanas))
        );

        lbl_Modifica.getAccessibleContext().setAccessibleName("gg gg");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /// Metodos para generales
    // <editor-fold defaultstate="collapsed" desc="General">

    /**
     * Maneja el cambio de pestañas en el componente JTabbedPane (JTP_Ventanas).
     *
     * @param evt El evento que desencadena el cambio de pestañas.
     */
    private void JTP_VentanasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_JTP_VentanasStateChanged
        int selectedIndex = JTP_Ventanas.getSelectedIndex();
        switch (selectedIndex) {
            case 0:
                //AEROLINEA
                if(USER.equals("pasajero_service"))
                {
                    JTP_Ventanas.setSelectedIndex(6);
                    JOptionPane.showMessageDialog(this, "ACCESO DENEGADO");
                    break;
                }
                btn_backAerolineaActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                consultaDatosAerolinea();
                break;
            case 1:
                //AVIÓN
                if(USER.equals("pasajero_service"))
                {
                    JTP_Ventanas.setSelectedIndex(6);
                    JOptionPane.showMessageDialog(this, "ACCESO DENEGADO");
                    break;
                }
                JCB_AerolineaAvion.removeAllItems();
                LlenarCBavion();
                btn_backAvionActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                consultaDatosAvion();
                break;
            case 2:
                //PILOTO
                if(USER.equals("pasajero_service"))
                {
                    JTP_Ventanas.setSelectedIndex(6);
                    JOptionPane.showMessageDialog(this, "ACCESO DENEGADO");
                    break;
                }
                JCB_GeneroPiloto.removeAllItems();
                JCB_GeneroPiloto.addItem("Masculino");
                JCB_GeneroPiloto.addItem("Femenino");
                JCB_GeneroPiloto.addItem("Otro");
                btn_backPilotoActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                consultaDatosPiloto();
                break;
            case 3:
                //CIUDAD
                if(USER.equals("pasajero_service")||USER.equals("aerolinea_staff"))
                {
                    JTP_Ventanas.setSelectedIndex(6);
                    JOptionPane.showMessageDialog(this, "ACCESO DENEGADO");
                    break;
                }
                btn_backCiudadActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                consultaDatosCiudad();
                break;
            case 4:
                //VUELO
                if(USER.equals("pasajero_service"))
                {
                    JTP_Ventanas.setSelectedIndex(6);
                    JOptionPane.showMessageDialog(this, "ACCESO DENEGADO");
                    break;
                }
                JCB_CiudOrgVuelo.removeAllItems();
                JCB_CiudDestVuelo.removeAllItems();
                LlenarCBvuelo();
                btn_backVueloActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                consultaDatosVuelo();
                break;
            case 5:
                //ITINERARIO
                if(USER.equals("pasajero_service"))
                {
                    JTP_Ventanas.setSelectedIndex(6);
                    JOptionPane.showMessageDialog(this, "ACCESO DENEGADO");
                    break;
                }
                JCB_PilotoItinerario.removeAllItems();
                JCB_VueloItinerario.removeAllItems();
                JCB_AvionItinerario.removeAllItems();
                listIDVuelo.clear();
                LlenarCBitinerario();
                btn_backItinerarioActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                consultaDatosItinerario();
                break;
            case 6:
                //PASAJERO
                if(USER.equals("aerolinea_staff"))
                {
                    JTP_Ventanas.setSelectedIndex(0);
                    JOptionPane.showMessageDialog(this, "ACCESO DENEGADO");
                    break;
                }
                JCB_GeneroPasajero.removeAllItems();
                JCB_GeneroPasajero.addItem("Masculino");
                JCB_GeneroPasajero.addItem("Femenino");
                JCB_GeneroPasajero.addItem("Otro");
                btn_backPasajeroActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                ConsultaDatosPasajero();
                break;
            case 7:
                //TARJETA-PASAJERO
                if(USER.equals("aerolinea_staff"))
                {
                    JTP_Ventanas.setSelectedIndex(0);
                    JOptionPane.showMessageDialog(this, "ACCESO DENEGADO");
                    break;
                }
                JCB_PasajeroTarPasajero.removeAllItems();
                LlenarCBTarjPasaj();
                btn_backTarPasajeroActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                ConsultaDatosTarPasajero();
                break;
            case 8:
                //ASIENTO
                if(USER.equals("aerolinea_staff"))
                {
                    JTP_Ventanas.setSelectedIndex(0);
                    JOptionPane.showMessageDialog(this, "ACCESO DENEGADO");
                    break;
                }
                JCB_ItinerarioAsiento.removeAllItems();
                JCB_LetraAsiento.removeAllItems();
                JCB_LetraAsiento.addItem("A");
                JCB_LetraAsiento.addItem("B");
                listIDItinerario.clear();
                llenarCBAsiento();
                btn_backAsientoActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                ConsultaDatosAsiento();
                break;
            case 9:
                //VENTA
                if(USER.equals("aerolinea_staff"))
                {
                    JTP_Ventanas.setSelectedIndex(0);
                    JOptionPane.showMessageDialog(this, "ACCESO DENEGADO");
                    break;
                }
                JCB_TarjetaVenta.removeAllItems();
                JCB_ItinerarioVenta.removeAllItems();
                listIDItinerario.clear();
                listIDTrjetaPasajero.clear();
                LlenarCBVenta();
                btn_backVentaActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                ConsultaVenta();
                break;
            case 10:
                //BOLETO
                if(USER.equals("aerolinea_staff"))
                {
                    JTP_Ventanas.setSelectedIndex(0);
                    JOptionPane.showMessageDialog(this, "ACCESO DENEGADO");
                    break;
                }
                backboleto();
                ConsultaBoleto();
                break;
            case 11:
                //Reporte 1
                LlenarCBR1();
                JCB_PilotoR1.setSelectedIndex(-1);
                
                DefaultTableModel modelR1 = (DefaultTableModel) JT_R1.getModel();
                modelR1.setRowCount(0);
                
                TF_HoraSalIR1.setText("00:00");
                JL_Count.setText("");
                break;
            case 12:
                //Reporte 2
                DefaultTableModel modelR2 = (DefaultTableModel) JT_R2.getModel();
                modelR2.setRowCount(0);
                
                tb_CostBaseR2.setText("");
                break;
        }
    }//GEN-LAST:event_JTP_VentanasStateChanged

    /**
     * Establece una conexión con la base de datos PostgreSQL.
     *
     * @return Una instancia de la interfaz Connection que representa la conexión establecida.
     * @throws ClassNotFoundException Si no se encuentra la clase del controlador de la base de datos.
     * @throws SQLException Si ocurre un error al intentar establecer la conexión con la base de datos.
     */
    public Connection ConnectBD() {
        Connection conne = null;
        try {
            Class.forName("org.postgresql.Driver");
            conne = DriverManager.getConnection(URL, USER, PASS);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        return conne;
    }

    /**
     * Ejecuta una consulta de modificación en la base de datos PostgreSQL.
     *
     * @param Query La consulta SQL a ejecutar.
     * @return 1 si la consulta se ejecuta correctamente, -1 si hay algún error.
     */
    public int Query1(String Query) {
        try {
            CONN = ConnectBD();
            java.sql.Statement Stmnt = CONN.createStatement();
            Stmnt.executeUpdate(Query);
            Stmnt.close();
            CONN.close();
            return 1;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex+Query);
            return -1;
        }
    }

    /**
     * Ejecuta una consulta SQL que incluye un RETURNING para obtener un valor específico de la base de datos.
     *
     * @param Query La consulta SQL a ejecutar, que incluye un RETURNING.
     * @param id El nombre del campo del cual se desea obtener el valor.
     * @return El valor obtenido del campo especificado, o -1 si hay algún error.
     */
    public int Query2(String Query, String id) {
        try {
            CONN = ConnectBD();
            java.sql.Statement Stmnt = CONN.createStatement();

            // Ejecutar la consulta SQL con el RETURNING para obtener el ID
            ResultSet rs = Stmnt.executeQuery(Query + " RETURNING "+id);

            if (rs.next()) {
                int generatedId = rs.getInt(id);
                rs.close();
                Stmnt.close();
                CONN.close();
                return generatedId;
            } else {
                rs.close();
                Stmnt.close();
                CONN.close();
                return -1; // No se pudo obtener el ID
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
            return -1; // Error en la operación
        }
    }

    // </editor-fold>
    
    /// Metodos para ventanas de tablas del esquema InfoAerolinea
    // <editor-fold defaultstate="collapsed" desc="InfoAerolinea">

    /// Metodos para la manipulación de la tabla AEROLINEA
    // <editor-fold defaultstate="collapsed" desc="METODOS VENTANA AEROLINEA">
    
    /**
     * Realiza una consulta a la base de datos para obtener información sobre las aerolíneas y actualiza la tabla correspondiente en la interfaz gráfica.
     * La información recuperada incluye el ID, el nombre, la dirección, el teléfono, la cantidad de aviones y la cantidad de pilotos de cada aerolínea.
     * Los resultados se muestran en la tabla JT_Aerolinea en la interfaz gráfica.
     */
    public void consultaDatosAerolinea()
    {
        try{
            CONN = ConnectBD();
            java.sql.Statement Stmnt = CONN.createStatement();
            String Query = "SELECT * FROM InfoAerolinea.Aerolinea";
            String[]Data = new String[6];
            ResultSet Columns = Stmnt.executeQuery (Query);
            DefaultTableModel model = (DefaultTableModel) JT_Aerolinea.getModel();
            
            // Eliminar todas las filas existentes
            model.setRowCount(0);
            while(Columns.next())
            {
                Data[0]=Columns.getString(1);
                Data[1]=Columns.getString(2);
                Data[2]=Columns.getString(3);
                Data[3]=Columns.getString(4);
                Data[4]=Columns.getString(5);
                Data[5]=Columns.getString(6);
                model.addRow(Data);
            }
            Stmnt.close();
            CONN.close();
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    /**
     * Realiza la eliminación de una aerolínea seleccionada de la base de datos y actualiza la tabla correspondiente en la interfaz gráfica.
     * Si no se ha seleccionado ninguna aerolínea, muestra un mensaje informativo.
     * Antes de eliminar la aerolínea, verifica si esta aparece como clave foránea en la tabla avión.
     * Si la aerolínea está siendo utilizada por aviones, muestra un mensaje informativo y cancela la eliminación.
     * Después de realizar la eliminación, actualiza la tabla JT_Aerolinea en la interfaz gráfica y vuelve a la vista principal de aerolíneas.
     *
     * @param evt Un objeto ActionEvent que representa el evento de clic en el botón "Eliminar Aerolínea".
     */
    private void btn_Eliminar_AerolineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eliminar_AerolineaActionPerformed
        if (currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String query = "DELETE FROM InfoAerolinea.Aerolinea WHERE idAerolinea = " + currentID;
        if(Query1(query)==-1)
        {
            String mensaje = "No se pudo eliminar porque aparece \ncomo clave foranea en la tabla avión";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        consultaDatosAerolinea();
        btn_backAerolineaActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Eliminar_AerolineaActionPerformed

    /**
     * Realiza la modificación de los datos de una aerolínea seleccionada en la base de datos y actualiza la tabla correspondiente en la interfaz gráfica.
     * Verifica que se haya seleccionado una aerolínea y que se hayan ingresado los nuevos datos correctamente.
     * Permite modificar el nombre y año de fundación de la aerolínea, así como opcionalmente su logotipo.
     * Si se proporciona un nuevo logotipo, convierte la imagen a bytes y actualiza la base de datos con la nueva información.
     * Si no se proporciona un nuevo logotipo, actualiza la base de datos con el nombre y año de fundación ingresados.
     * Después de realizar la modificación, actualiza la tabla JT_Aerolinea en la interfaz gráfica y vuelve a la vista principal de aerolíneas.
     *
     * @param evt Un objeto ActionEvent que representa el evento de clic en el botón "Modificar Aerolínea".
    */
    private void btn_Modificar_AerolineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Modificar_AerolineaActionPerformed
        if (tb_NombreAero.getText().equals("") || tb_AnioFAero.getText().equals("") || currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro y sus nuevos datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String query = "";
        if (!tb_Image.getText().equals("-- Nueva imagen (Opcional) --")) {
            query = "UPDATE InfoAerolinea.Aerolinea SET Nom_Aerolinea = ?, AñoFundacion = ?, Logotipo = ? WHERE idAerolinea = " + currentID;

            try {
                // Establecer la conexión a la base de datos
                Connection conn = DriverManager.getConnection(URL, USER, PASS);
                // Preparar la declaración SQL
                PreparedStatement pstmt = conn.prepareStatement(query);
                pstmt.setString(1, tb_NombreAero.getText());  // Asignar el nombre desde el JTextField
                pstmt.setInt(2, Integer.parseInt(tb_AnioFAero.getText()));  // Convertir a entero y asignar el año desde el JTextField
                pstmt.setBytes(3, bytesImagen);  // Asignar los bytes de la imagen

                // Ejecutar la consulta de inserción
                pstmt.executeUpdate();

                // Cerrar la conexión y la declaración
                pstmt.close();
                conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
                String mensaje = "No se pudo modificar\n";
                int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
                JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
                return;
            }
        } else {
            query = "UPDATE InfoAerolinea.Aerolinea SET Nom_Aerolinea = '" + tb_NombreAero.getText() + "', AñoFundacion = " + tb_AnioFAero.getText() + " WHERE idAerolinea = " + currentID;
            Query1(query);
        }
        consultaDatosAerolinea();
        btn_backAerolineaActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Modificar_AerolineaActionPerformed

    /**
     * Realiza la inserción de una nueva aerolínea con los datos proporcionados en la interfaz gráfica a la base de datos y actualiza la tabla correspondiente.
     * Verifica que se hayan ingresado correctamente el nombre, año de fundación y logotipo de la nueva aerolínea.
     * Convierte la imagen del logotipo a bytes para almacenarla en la base de datos.
     * Después de realizar la inserción, actualiza la tabla JT_Aerolinea en la interfaz gráfica y vuelve a la vista principal de aerolíneas.
     *
     * @param evt Un objeto ActionEvent que representa el evento de clic en el botón "Agregar Aerolínea".
     */
    private void btn_Agregar_AerolineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Agregar_AerolineaActionPerformed
        if (tb_NombreAero.getText().equals("") || tb_AnioFAero.getText().equals("") || tb_Image.getText().equals("Añade una imagen")) {
            String mensaje = "Ingresa correctamente los datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        try {
            // Establecer la conexión a la base de datos
            Connection conn = DriverManager.getConnection(URL, USER, PASS);

            // Consulta SQL para la inserción (con un parámetro para la imagen)
            String query = "INSERT INTO InfoAerolinea.Aerolinea (Nom_Aerolinea, FlotaTotal, AñoFundacion, NumVuelos, Logotipo) VALUES (?, 0, ?, 0, ?)";

            // Preparar la declaración SQL
            PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.setString(1, tb_NombreAero.getText());  // Asignar el nombre desde el JTextField
            pstmt.setInt(2, Integer.parseInt(tb_AnioFAero.getText()));  // Convertir a entero y asignar el año desde el JTextField
            pstmt.setBytes(3, bytesImagen);  // Asignar los bytes de la imagen

            // Ejecutar la consulta de inserción
            int filasAfectadas = pstmt.executeUpdate();

            // Verificar si la inserción fue exitosa
            if (filasAfectadas > 0) {
                System.out.println("Inserción exitosa.");
            } else {
                System.out.println("La inserción no fue exitosa.");
            }

            // Cerrar la conexión y la declaración
            pstmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            String mensaje = "No se pudo insertar\n";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        consultaDatosAerolinea();
        btn_backAerolineaActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Agregar_AerolineaActionPerformed

    /**
     * Restablece la interfaz gráfica de la vista de aerolíneas a su estado inicial.
     * Oculta la etiqueta de modificación, habilita el botón "Agregar Aerolínea" y deshabilita los botones "Eliminar Aerolínea", "Modificar Aerolínea" y "Volver".
     * Limpia los campos de texto de nombre y año de fundación, y restablece el texto y la imagen del logotipo a los valores iniciales.
     * Establece la variable `bytesImagen` a `null` y la variable `currentID` a una cadena vacía.
     *
     * @param evt Un objeto ActionEvent que representa el evento de clic en el botón "Volver".
     */
    private void btn_backAerolineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backAerolineaActionPerformed
        lbl_Modifica.setVisible(false);
        btn_Agregar_Aerolinea.setEnabled(true);
        btn_Eliminar_Aerolinea.setEnabled(false);
        btn_Modificar_Aerolinea.setEnabled(false);
        btn_backAerolinea.setEnabled(false);
        tb_NombreAero.setText("");
        tb_AnioFAero.setText("");
        tb_Image.setText("Añade una imagen");
        lbl_image.setText("Imagen");
        lbl_image.setIcon(null);
        bytesImagen = null;
        currentID = "";
        //openFileDialog1.Reset();
    }//GEN-LAST:event_btn_backAerolineaActionPerformed

    /**
     * Maneja el evento de clic del mouse en la tabla de datos de aerolíneas.
     * Muestra la etiqueta de modificación y habilita los botones "Eliminar Aerolínea", "Modificar Aerolínea" y "Volver".
     * Deshabilita el botón "Agregar Aerolínea". Obtiene la información de la fila seleccionada en la tabla y la muestra en los campos correspondientes.
     * Carga la imagen de la aerolínea si está disponible en la base de datos y la muestra en el JLabel correspondiente.
     *
     * @param evt Un objeto MouseEvent que representa el evento de clic del mouse en la tabla de datos de aerolíneas.
     */
    private void JT_AerolineaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JT_AerolineaMouseClicked
        lbl_Modifica.setVisible(true);
        btn_Agregar_Aerolinea.setEnabled(false);
        btn_Eliminar_Aerolinea.setEnabled(true);
        btn_Modificar_Aerolinea.setEnabled(true);
        btn_backAerolinea.setEnabled(true);

        int filaSeleccionada = JT_Aerolinea.getSelectedRow();
        currentID = JT_Aerolinea.getValueAt(filaSeleccionada, 0).toString();
        String NomAero = JT_Aerolinea.getValueAt(filaSeleccionada, 1).toString();
        String Flota = JT_Aerolinea.getValueAt(filaSeleccionada, 2).toString();
        String AnioF = JT_Aerolinea.getValueAt(filaSeleccionada, 3).toString();
        String NumVuel = JT_Aerolinea.getValueAt(filaSeleccionada, 4).toString();
        String Log = JT_Aerolinea.getValueAt(filaSeleccionada, 5).toString();

        tb_NombreAero.setText(NomAero);
        tb_AnioFAero.setText(AnioF);
        tb_Image.setText( "-- Nueva imagen (Opcional) --");

        // CARGAR IMAGEN
        bytesImagen = ObtenerBytesDesdeBaseDeDatos(currentID);
        if (bytesImagen != null) {
            ImageIcon imagen = new ImageIcon(bytesImagen);
            // Escalar la imagen para que se ajuste al JLabel
            imagen = new ImageIcon(imagen.getImage().getScaledInstance(lbl_image.getWidth(), lbl_image.getHeight(), Image.SCALE_REPLICATE));
            lbl_image.setIcon(imagen);
        }
    }//GEN-LAST:event_JT_AerolineaMouseClicked

    /**
     * Recupera y devuelve los bytes de la imagen de logotipo de una aerolínea desde la base de datos.
     *
     * @param idAerolinea El identificador único de la aerolínea cuya imagen se desea recuperar.
     * @return Un array de bytes que representa la imagen de logotipo de la aerolínea, o null si no se puede recuperar.
     */
    public byte[] ObtenerBytesDesdeBaseDeDatos(String idAerolinea) {
        byte[] bytesImagen = null;
        try {
            Connection conn = DriverManager.getConnection(URL, USER, PASS);
            PreparedStatement pstmt = conn.prepareStatement("SELECT Logotipo FROM InfoAerolinea.Aerolinea WHERE idAerolinea = "+idAerolinea);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                bytesImagen = rs.getBytes("Logotipo");
            }
            rs.close();
            pstmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return bytesImagen;
    }

    /**
     * Maneja el evento de clic en el botón para seleccionar y cargar una imagen desde el sistema de archivos.
     * Abre un cuadro de diálogo para seleccionar un archivo de imagen (formatos admitidos: jpg, png).
     * Muestra el nombre del archivo seleccionado en el JTextField tb_Image y convierte la imagen a bytes.
     *
     * @param evt El evento de acción que desencadenó este método.
     */
    private void btn_ImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ImagenActionPerformed
        JFileChooser seleccionarArchivo = new JFileChooser();
        seleccionarArchivo.setDialogTitle("Seleccionar Imagen");
        seleccionarArchivo.setFileFilter(new FileNameExtensionFilter("Archivos de imagen", "jpg", "png"));
        int resultado = seleccionarArchivo.showOpenDialog(this);

        if (resultado == JFileChooser.APPROVE_OPTION) {
            File archivoSeleccionado = seleccionarArchivo.getSelectedFile();
            String path = archivoSeleccionado.getAbsolutePath();

            // Asigna el nombre del archivo seleccionado al JTextField tb_Image
            tb_Image.setText(path);

            // Convierte la imagen a bytes
            try {
                FileInputStream fis = new FileInputStream(archivoSeleccionado);
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                byte[] buf = new byte[1024];
                for (int readNum; (readNum = fis.read(buf)) != -1;) {
                    bos.write(buf, 0, readNum);
                }
                bytesImagen = bos.toByteArray();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btn_ImagenActionPerformed

    /**
     * Maneja el evento de tecla escrita en el campo de texto tb_AnioFAero.
     * Verifica si el carácter ingresado es un dígito o la tecla de borrar (\b).
     * Consumirá el evento si no es un número o la tecla de borrar.
     * También consumirá el evento si ya hay 4 caracteres en el campo.
     *
     * @param evt El evento de tecla que desencadenó este método.
     */
    private void tb_AnioFAeroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_AnioFAeroKeyTyped
        char c = evt.getKeyChar();
        // Verificar si el carácter es un número o la tecla de borrar
        if (!Character.isDigit(c) && c != '\b') {
            evt.consume(); // Consumir el evento si no es un número o la tecla de borrar
        }

        // Verificar si ya hay 4 caracteres en el campo
        if (tb_AnioFAero.getText().length() >= 4) {
            evt.consume(); // Consumir el evento si ya hay 4 caracteres
        }
    }//GEN-LAST:event_tb_AnioFAeroKeyTyped

    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="METODOS VENTANA AVION">
    
    /**
     * Llena el JComboBox JCB_AerolineaAvion con información de aerolíneas.
     * La información incluye el nombre de la aerolínea y su año de fundación.
     */
    public void LlenarCBavion()
    {
        try {
            Connection conn = DriverManager.getConnection(URL, USER, PASS);
            Statement statement = conn.createStatement();
            String query = "SELECT AñoFundacion, Nom_Aerolinea FROM InfoAerolinea.Aerolinea";
            ResultSet resultSet = statement.executeQuery(query);
            while (resultSet.next()) {
                String aerolineaInfo = resultSet.getString("Nom_Aerolinea") + " (" + resultSet.getString("AñoFundacion") + ")";
                JCB_AerolineaAvion.addItem(aerolineaInfo);
            }
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Realiza una consulta a la base de datos para obtener información de aviones y
     * actualiza el modelo de la tabla JT_Avion con los resultados.
     */
    public void consultaDatosAvion()
    {
        try{
            CONN = ConnectBD();
            java.sql.Statement Stmnt = CONN.createStatement();
            String Query = "SELECT * FROM InfoAerolinea.Avion";
            String[]Data = new String[6];
            ResultSet Columns = Stmnt.executeQuery (Query);
            DefaultTableModel model = (DefaultTableModel) JT_Avion.getModel();
            
            // Eliminar todas las filas existentes
            model.setRowCount(0);
            while(Columns.next())
            {
                Data[0]=Columns.getString(1);
                Data[1]=getAerolinea(Columns.getString(2), true);
                Data[2]=Columns.getString(3);
                Data[3]=Columns.getString(4);
                Data[4]=Columns.getString(5);
                Data[5]=Columns.getString(6);
                model.addRow(Data);
            }
            Stmnt.close();
            CONN.close();
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    /**
     * Obtiene el valor de la aerolínea correspondiente al ID proporcionado.
     *
     * @param val   El valor del ID o nombre de la aerolínea.
     * @param flag  Indica si se proporciona el nombre de la aerolínea (true) o el ID (false).
     * @return      El valor correspondiente (ID o nombre de la aerolínea).
     */
    private String getAerolinea(String val, boolean flag) {
        String aeroValue = "";
        try {
            Connection conexion = DriverManager.getConnection(URL, USER, PASS);
            //conexion.setAutoCommit(false);
            String Query = "";

            if (!flag) {
                Query = "SELECT idAerolinea FROM InfoAerolinea.Aerolinea WHERE Nom_Aerolinea = '"+val+"'";
            } else {
                Query = "SELECT Nom_Aerolinea, AñoFundacion FROM InfoAerolinea.Aerolinea WHERE idAerolinea = "+val;
            }

            PreparedStatement pstmt = conexion.prepareStatement(Query);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                if (!flag) {
                    aeroValue = rs.getString("idAerolinea");
                } else {
                    aeroValue = rs.getString("Nom_Aerolinea") + " (" + rs.getString("AñoFundacion") + ")";
                }
            }

            rs.close();
            pstmt.close();
            //conexion.commit();
            conexion.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return aeroValue;
    }

    /**
     * Maneja el evento de clic en el botón para eliminar un avión.
     * Si no se selecciona correctamente un registro, se muestra un mensaje informativo.
     * Se ejecuta una consulta SQL para eliminar el avión con el ID actual.
     */
    private void btn_Eliminar_AvionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eliminar_AvionActionPerformed
        if (currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String query = "DELETE FROM InfoAerolinea.Avion WHERE idAvion = " + currentID;
        if(Query1(query)==-1)
        {
            String mensaje = "No se pudo eliminar porque aparece \ncomo clave foranea en otra tabla";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        consultaDatosAvion();
        btn_backAvionActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Eliminar_AvionActionPerformed

    /**
     * Maneja el evento de clic en el botón para modificar un avión.
     * Si no se selecciona correctamente un registro o no se ingresan correctamente los nuevos datos, se muestra un mensaje informativo.
     * Se ejecuta una consulta SQL para modificar el avión con el ID actual.
     */
    private void btn_Modificar_AvionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Modificar_AvionActionPerformed
        if (tb_ModeloAvion.getText().equals("") || tb_AnioFAvion.getText().equals("") || JCB_AerolineaAvion.getSelectedIndex() == -1 || currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro y sus nuevos datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String query = "";
        String selectedItem = (String) JCB_AerolineaAvion.getSelectedItem();
        String nomAero = selectedItem.split("\\s+\\(", 2)[0];
        String idAero = getAerolinea(nomAero, false);

        if(JCHBX_ActivoAvion.isSelected())
        {
            query = "UPDATE InfoAerolinea.Avion SET idAerolinea = " + idAero + ", Modelo = '" + tb_ModeloAvion.getText() + "', AñoFabricacion = " + tb_AnioFAvion.getText() + ", EstadoUso = TRUE WHERE idAvion = " + currentID;
        }else
        {
            query = "UPDATE InfoAerolinea.Avion SET idAerolinea = " + idAero + ", Modelo = '" + tb_ModeloAvion.getText() + "', AñoFabricacion = " + tb_AnioFAvion.getText() + ", EstadoUso = FALSE WHERE idAvion = " + currentID;
        }

        if(Query1(query)==-1)
        {
            String mensaje = "No se pudo modificar porque \nel año de fabricacion es esta fuera de los limites";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        consultaDatosAvion();
        btn_backAvionActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Modificar_AvionActionPerformed

    /**
     * Maneja el evento de clic en el botón para agregar un nuevo avión.
     * Si no se ingresan correctamente los datos, se muestra un mensaje informativo.
     * Se ejecuta una consulta SQL para agregar un nuevo avión.
     */
    private void btn_Agregar_AvionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Agregar_AvionActionPerformed
        if (tb_ModeloAvion.getText().equals("") || tb_AnioFAvion.getText().equals("") || JCB_AerolineaAvion.getSelectedIndex() == -1) {
            String mensaje = "Ingresa correctamente los datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String query = "";
        String selectedItem = (String) JCB_AerolineaAvion.getSelectedItem();
        String nomAero = selectedItem.split("\\s+\\(", 2)[0];
        String idAero = getAerolinea(nomAero, false);

        if(JCHBX_ActivoAvion.isSelected())
        {
            query = "INSERT INTO InfoAerolinea.Avion (idAerolinea, Capacidad, Modelo, AñoFabricacion, EstadoUso) VALUES (" + idAero + ", 8, '" + tb_ModeloAvion.getText() + "', " + tb_AnioFAvion.getText() + ", TRUE)";
        }else
        {
            query = "INSERT INTO InfoAerolinea.Avion (idAerolinea, Capacidad, Modelo, AñoFabricacion, EstadoUso) VALUES (" + idAero + ", 8, '" + tb_ModeloAvion.getText() + "', " + tb_AnioFAvion.getText() + ", FALSE)";
        }

        if(Query1(query)==-1)
        {
            String mensaje = "No se pudo agregar porque \nel año de fabricacion es esta fuera de los limites";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        consultaDatosAvion();
        btn_backAvionActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Agregar_AvionActionPerformed

    /**
     * Maneja el evento de tecla escrita en el campo de texto tb_AnioFAvion.
     * Verifica si el carácter ingresado es un dígito o la tecla de borrar (\b).
     * Consumirá el evento si no es un número o la tecla de borrar.
     * También consumirá el evento si ya hay 4 caracteres en el campo.
     */
    private void tb_AnioFAvionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_AnioFAvionKeyTyped
        char c = evt.getKeyChar();
        // Verificar si el carácter es un número o la tecla de borrar
        if (!Character.isDigit(c) && c != '\b') {
            evt.consume(); // Consumir el evento si no es un número o la tecla de borrar
        }

        // Verificar si ya hay 4 caracteres en el campo
        if (tb_AnioFAvion.getText().length() >= 4) {
            evt.consume(); // Consumir el evento si ya hay 4 caracteres
        }
    }//GEN-LAST:event_tb_AnioFAvionKeyTyped

    /**
     * Maneja el evento de clic en el botón para regresar en la interfaz de aviones.
     * Restablece los campos y controles a su estado inicial.
     */
    private void btn_backAvionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backAvionActionPerformed
        lbl_Modifica.setVisible(false);
        btn_Agregar_Avion.setEnabled(true);
        btn_Eliminar_Avion.setEnabled(false);
        btn_Modificar_Avion.setEnabled(false);
        btn_backAvion.setEnabled(false);
        tb_ModeloAvion.setText("");
        tb_AnioFAvion.setText("");
        JCB_AerolineaAvion.setSelectedIndex(-1); // Seleccionar "Ninguno"
        JCHBX_ActivoAvion.setSelected(false);
        currentID = "";
    }//GEN-LAST:event_btn_backAvionActionPerformed

    /**
     * Maneja el evento de clic en una fila de la tabla JT_Avion.
     * Muestra los detalles del avión seleccionado y habilita los controles de modificación y eliminación.
     */
    private void JT_AvionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JT_AvionMouseClicked
        lbl_Modifica.setVisible(true);
        btn_Agregar_Avion.setEnabled(false);
        btn_Eliminar_Avion.setEnabled(true);
        btn_Modificar_Avion.setEnabled(true);
        btn_backAvion.setEnabled(true);

        int filaSeleccionada = JT_Avion.getSelectedRow();
        currentID = JT_Avion.getValueAt(filaSeleccionada, 0).toString();
        String Aero = JT_Avion.getValueAt(filaSeleccionada, 1).toString();
        String Modelo = JT_Avion.getValueAt(filaSeleccionada, 3).toString();
        String AnioFab = JT_Avion.getValueAt(filaSeleccionada, 4).toString();
        String Activo = JT_Avion.getValueAt(filaSeleccionada, 5).toString();

        tb_ModeloAvion.setText(Modelo);
        tb_AnioFAvion.setText(AnioFab);
        if(Activo.equals("f"))
        {
            JCHBX_ActivoAvion.setSelected(false);
        }else
        {
            JCHBX_ActivoAvion.setSelected(true);
        }

        for (int i = 0; i < JCB_AerolineaAvion.getItemCount(); i++) {
            String item = (String) JCB_AerolineaAvion.getItemAt(i);

            if (item.equals(Aero)) {
                JCB_AerolineaAvion.setSelectedIndex(i);
                break;
            }
        }
    }//GEN-LAST:event_JT_AvionMouseClicked
    
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="METODOS VENTANA PILOTO">
    
    /**
     * Realiza una consulta a la base de datos para obtener información de pilotos y
     * actualiza el modelo de la tabla JT_Piloto con los resultados.
     */
    public void consultaDatosPiloto()
    {
        try{
            CONN = ConnectBD();
            java.sql.Statement Stmnt = CONN.createStatement();
            String Query = "SELECT * FROM InfoAerolinea.Piloto";
            String[]Data = new String[5];
            ResultSet Columns = Stmnt.executeQuery (Query);
            DefaultTableModel model = (DefaultTableModel) JT_Piloto.getModel();
            
            // Eliminar todas las filas existentes
            model.setRowCount(0);
            while(Columns.next())
            {
                Data[0]=Columns.getString(1);
                Data[1]=Columns.getString(2);
                Data[2]=Columns.getString(3);
                Data[3]=Columns.getString(4);////
                Data[4]=Columns.getString(5);
                model.addRow(Data);
            }
            Stmnt.close();
            CONN.close();
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    /**
     * Maneja el evento de clic en el botón para eliminar un piloto.
     * Si no se selecciona correctamente un registro, se muestra un mensaje informativo.
     * Se ejecuta una consulta SQL para eliminar el piloto con el ID actual.
     */
    private void btn_Eliminar_PilotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eliminar_PilotoActionPerformed
        if (currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String query = "DELETE FROM InfoAerolinea.Piloto WHERE idPiloto = " + currentID;
        if(Query1(query)==-1)
        {
            String mensaje = "No se pudo eliminar porque aparece \ncomo clave foranea en otra tabla";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        consultaDatosPiloto();
        btn_backPilotoActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Eliminar_PilotoActionPerformed

    /**
     * Maneja el evento de clic en el botón para modificar un piloto.
     * Si no se selecciona correctamente un registro o no se ingresan correctamente los nuevos datos, se muestra un mensaje informativo.
     * Se ejecuta una consulta SQL para modificar el piloto con el ID actual.
     */
    private void btn_Modificar_PilotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Modificar_PilotoActionPerformed
        if (tb_NombrePiloto.getText().equals("") || tb_NumLicPiloto.getText().equals("") || JCB_GeneroPiloto.getSelectedIndex() == -1 || JC_FechaNacPiloto.getDate() == null || currentID.equals("") || tb_NumLicPiloto.getText().length() != 10) {
            String mensaje = "Selecciona correctamente un registro y sus nuevos datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        JCalendar fechaNac = JC_FechaNacPiloto;
        Date fechaSeleccionada = new Date(fechaNac.getDate().getTime());
        String Query = "UPDATE InfoAerolinea.Piloto SET Nom_Piloto = '" + tb_NombrePiloto.getText() + "', Genero = '" + JCB_GeneroPiloto.getSelectedItem() + "', FechaNacimiento='" + fechaSeleccionada + "', NumLicencia=" + tb_NumLicPiloto.getText() + "  WHERE idPiloto = " + currentID;
        if(Query1(Query)==-1)
        {
            String mensaje = "No se pudo modificar \nLa fecha de nacimiento no cumple con la restricción de edad ó\nEl numero de licencia se repite con otro registro";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        consultaDatosPiloto();
        btn_backPilotoActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Modificar_PilotoActionPerformed

    /**
     * Maneja el evento de clic en el botón para agregar un nuevo piloto.
     * Si no se ingresan correctamente los datos, se muestra un mensaje informativo.
     * Se ejecuta una consulta SQL para agregar un nuevo piloto.
     */
    private void btn_Agregar_PilotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Agregar_PilotoActionPerformed
        if (tb_NombrePiloto.getText().equals("") || tb_NumLicPiloto.getText().equals("") || JCB_GeneroPiloto.getSelectedIndex() == -1 || JC_FechaNacPiloto.getDate() == null || tb_NumLicPiloto.getText().length() != 10) {
            String mensaje = "Ingresa correctamente los datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        JCalendar fechaNac = JC_FechaNacPiloto;
        Date fechaSeleccionada = new Date(fechaNac.getDate().getTime());
        String Query = "INSERT INTO InfoAerolinea.Piloto (Nom_Piloto, Genero, FechaNacimiento, NumLicencia) VALUES ('" + tb_NombrePiloto.getText() + "','" + JCB_GeneroPiloto.getSelectedItem() + "','" + fechaSeleccionada + "'," + tb_NumLicPiloto.getText() + ")";
        if(Query1(Query)==-1)
        {
            String mensaje = "No se pudo agregar \nLa fecha de nacimiento no cumple con la restricción de edad ó\nEl numero de licencia se repite con otro registro";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        consultaDatosPiloto();
        btn_backPilotoActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Agregar_PilotoActionPerformed

    /**
     * Maneja el evento de tecla escrita en el campo de texto tb_NumLicPiloto.
     * Verifica si el carácter ingresado es un dígito o la tecla de borrar (\b).
     * Consumirá el evento si no es un número o la tecla de borrar.
     * También consumirá el evento si ya hay 10 caracteres en el campo.
     */
    private void tb_NumLicPilotoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_NumLicPilotoKeyTyped
        char c = evt.getKeyChar();
        // Verificar si el carácter es un número o la tecla de borrar
        if (!Character.isDigit(c) && c != '\b') {
            evt.consume(); // Consumir el evento si no es un número o la tecla de borrar
        }

        // Verificar si ya hay 10 caracteres en el campo
        if (tb_NumLicPiloto.getText().length() >= 10) {
            evt.consume(); // Consumir el evento si ya hay 10 caracteres
        }
    }//GEN-LAST:event_tb_NumLicPilotoKeyTyped

    /**
     * Maneja el evento de clic en el botón para regresar en la interfaz de pilotos.
     * Restablece los campos y controles a su estado inicial.
     */
    private void btn_backPilotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backPilotoActionPerformed
        lbl_Modifica.setVisible(false);
        btn_Agregar_Piloto.setEnabled(true);
        btn_Eliminar_Piloto.setEnabled(false);
        btn_Modificar_Piloto.setEnabled(false);
        btn_backPiloto.setEnabled(false);
        tb_NombrePiloto.setText("");
        tb_NumLicPiloto.setText("");
        JCB_GeneroPiloto.setSelectedIndex(-1); // Seleccionar "Ninguno"
        Calendar calendar = Calendar.getInstance();
        java.util.Date fechaActual = calendar.getTime();
        // Establecer la fecha actual en el JDateChooser
        JC_FechaNacPiloto.setDate(fechaActual);
        currentID = "";
    }//GEN-LAST:event_btn_backPilotoActionPerformed

    /**
     * Maneja el evento de clic en una fila de la tabla JT_Piloto.
     * Muestra los detalles del piloto seleccionado y habilita los controles de modificación y eliminación.
     */
    private void JT_PilotoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JT_PilotoMouseClicked
        lbl_Modifica.setVisible(true);
        btn_Agregar_Piloto.setEnabled(false);
        btn_Eliminar_Piloto.setEnabled(true);
        btn_Modificar_Piloto.setEnabled(true);
        btn_backPiloto.setEnabled(true);

        int filaSeleccionada = JT_Piloto.getSelectedRow();
        currentID = JT_Piloto.getValueAt(filaSeleccionada, 0).toString();
        String NomPilot = JT_Piloto.getValueAt(filaSeleccionada, 1).toString();
        String Genero = JT_Piloto.getValueAt(filaSeleccionada, 2).toString();
        String FechaNac = JT_Piloto.getValueAt(filaSeleccionada, 3).toString();
        String NumLic = JT_Piloto.getValueAt(filaSeleccionada, 4).toString();

        SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date fechaSeleccionada = null;
        try {
            fechaSeleccionada = formatoFecha.parse(FechaNac);
        } catch (ParseException ex) {
            Logger.getLogger(AEROPUERTO.class.getName()).log(Level.SEVERE, null, ex);
        }

        tb_NombrePiloto.setText(NomPilot);
        tb_NumLicPiloto.setText(NumLic);
        JC_FechaNacPiloto.setDate(fechaSeleccionada);
        for (int i = 0; i < JCB_GeneroPiloto.getItemCount(); i++) {
            String item = (String) JCB_GeneroPiloto.getItemAt(i);

            if (item.equals(Genero)) {
                JCB_GeneroPiloto.setSelectedIndex(i);
                break;
            }
        }
    }//GEN-LAST:event_JT_PilotoMouseClicked
    
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="METODOS VENTANA CIUDAD">
    
    /**
     * Realiza una consulta a la base de datos para obtener información de ciudades y
     * actualiza el modelo de la tabla JT_Ciudad con los resultados.
     */
    public void consultaDatosCiudad()
    {
        try{
            CONN = ConnectBD();
            java.sql.Statement Stmnt = CONN.createStatement();
            String Query = "SELECT * FROM InfoAerolinea.Ciudad";
            String[]Data = new String[3];
            ResultSet Columns = Stmnt.executeQuery (Query);
            DefaultTableModel model = (DefaultTableModel) JT_Ciudad.getModel();
            
            // Eliminar todas las filas existentes
            model.setRowCount(0);
            while(Columns.next())
            {
                Data[0]=Columns.getString(1);
                Data[1]=Columns.getString(2);
                Data[2]=Columns.getString(3);
                model.addRow(Data);
            }
            Stmnt.close();
            CONN.close();
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    /**
     * Maneja el evento de clic en una fila de la tabla JT_Ciudad.
     * Muestra los detalles de la ciudad seleccionada y habilita los controles de modificación y eliminación.
     */
    private void JT_CiudadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JT_CiudadMouseClicked
        lbl_Modifica.setVisible(true);
        btn_Agregar_Ciudad.setEnabled(false);
        btn_Eliminar_Ciudad.setEnabled(true);
        btn_Modificar_Ciudad.setEnabled(true);
        btn_backCiudad.setEnabled(true);

        int filaSeleccionada = JT_Ciudad.getSelectedRow();
        currentID = JT_Ciudad.getValueAt(filaSeleccionada, 0).toString();
        String NomCiudad = JT_Ciudad.getValueAt(filaSeleccionada, 1).toString();
        String Pais = JT_Ciudad.getValueAt(filaSeleccionada, 2).toString();

        tb_NombreCiudad.setText(NomCiudad);
        tb_PaisCiudad.setText(Pais);
    }//GEN-LAST:event_JT_CiudadMouseClicked

    /**
     * Maneja el evento de clic en el botón para eliminar una ciudad.
     * Si no se selecciona correctamente un registro, se muestra un mensaje informativo.
     * Se ejecuta una consulta SQL para eliminar la ciudad con el ID actual.
     */
    private void btn_Eliminar_CiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eliminar_CiudadActionPerformed
        if (currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String query = "DELETE FROM InfoAerolinea.Ciudad WHERE idCiudad = " + currentID;
        if(Query1(query)==-1)
        {
            String mensaje = "No se pudo eliminar porque aparece \ncomo clave foranea en otra tabla";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        consultaDatosCiudad();
        btn_backCiudadActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Eliminar_CiudadActionPerformed

    /**
     * Maneja el evento de clic en el botón para modificar una ciudad.
     * Si no se selecciona correctamente un registro o no se ingresan correctamente los nuevos datos, se muestra un mensaje informativo.
     * Se ejecuta una consulta SQL para modificar la ciudad con el ID actual.
     */
    private void btn_Modificar_CiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Modificar_CiudadActionPerformed
        if (tb_NombreCiudad.getText().equals("") || tb_PaisCiudad.getText().equals("") || currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro y sus nuevos datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String Query = "UPDATE InfoAerolinea.Ciudad SET Nom_Ciudad = '" + tb_NombreCiudad.getText() + "', Pais = '" + tb_PaisCiudad.getText() + "' WHERE idCiudad = " + currentID;
        if(Query1(Query)==-1)
        {
            String mensaje = "No se pudo modificar\nEse registro ya existe";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        consultaDatosCiudad();
        btn_backCiudadActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Modificar_CiudadActionPerformed

    /**
     * Maneja el evento de clic en el botón para agregar una nueva ciudad.
     * Si no se ingresan correctamente los datos, se muestra un mensaje informativo.
     * Se ejecuta una consulta SQL para agregar una nueva ciudad.
     */
    private void btn_Agregar_CiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Agregar_CiudadActionPerformed
        if (tb_NombreCiudad.getText().equals("") || tb_PaisCiudad.getText().equals("")) {
            String mensaje = "Selecciona correctamente un registro y sus nuevos datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String Query = "INSERT INTO InfoAerolinea.Ciudad (Nom_Ciudad, Pais) VALUES ('" + tb_NombreCiudad.getText() + "','" + tb_PaisCiudad.getText() + "')";
        if(Query1(Query)==-1)
        {
            String mensaje = "No se pudo agregar\nEse registro ya existe";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        consultaDatosCiudad();
        btn_backCiudadActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Agregar_CiudadActionPerformed

    /**
     * Maneja el evento de clic en el botón para regresar en la interfaz de ciudades.
     * Restablece los campos y controles a su estado inicial.
     */
    private void btn_backCiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backCiudadActionPerformed
        lbl_Modifica.setVisible(false);
        btn_Agregar_Ciudad.setEnabled(true);
        btn_Eliminar_Ciudad.setEnabled(false);
        btn_Modificar_Ciudad.setEnabled(false);
        btn_backCiudad.setEnabled(false);
        tb_NombreCiudad.setText("");
        tb_PaisCiudad.setText("");
        currentID = "";
    }//GEN-LAST:event_btn_backCiudadActionPerformed
    
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="METODOS VENTANA VUELO">
    
    /**
     * Realiza una consulta a la base de datos para obtener información de vuelos
     * y actualiza el modelo de la tabla JT_Vuelo con los resultados.
     */
    public void consultaDatosVuelo()
    {
        try{
            CONN = ConnectBD();
            java.sql.Statement Stmnt = CONN.createStatement();
            String Query = "SELECT * FROM InfoAerolinea.Vuelo";
            String[]Data = new String[5];
            ResultSet Columns = Stmnt.executeQuery (Query);
            DefaultTableModel model = (DefaultTableModel) JT_Vuelo.getModel();
            
            // Eliminar todas las filas existentes
            model.setRowCount(0);
            while(Columns.next())
            {
                Data[0]=Columns.getString(1);
                Data[1]=getCiudad(Columns.getString(2),true);
                Data[2]=getCiudad(Columns.getString(3),true);
                Data[3]=Columns.getString(4);
                Data[4]=Columns.getString(5);
                model.addRow(Data);
            }
            Stmnt.close();
            CONN.close();
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    /**
     * Llena los elementos del JComboBox JCB_CiudOrgVuelo y JCB_CiudDestVuelo
     * con información de ciudades obtenida de la base de datos.
     */
    public void LlenarCBvuelo()
    {
        try {
            Connection conn = DriverManager.getConnection(URL, USER, PASS);
            Statement statement = conn.createStatement();
            String query = "SELECT Nom_Ciudad, Pais FROM InfoAerolinea.Ciudad";
            ResultSet resultSet = statement.executeQuery(query);
            while (resultSet.next()) {
                String CiudadInfo = resultSet.getString("Nom_Ciudad") + " - " + resultSet.getString("Pais");
                JCB_CiudOrgVuelo.addItem(CiudadInfo);
                JCB_CiudDestVuelo.addItem(CiudadInfo);
            }
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Obtiene la información de una ciudad, ya sea por ID o por nombre y país,
     * de acuerdo al valor proporcionado y al flag indicado.
     *
     * @param val  El valor a buscar (puede ser el nombre de la ciudad o su ID).
     * @param flag Indica si se busca por nombre y país (false) o por ID (true).
     * @return La información de la ciudad en formato "nombre - país" o el ID de la ciudad.
     */
    public String getCiudad(String val, boolean flag) {
        String cdCalue = "";
        try (Connection conexion = DriverManager.getConnection(URL, USER, PASS)) {
            String consulta;
            if (!flag) {
                String[] partes = val.split("-");
                String ciudad = partes[0].trim();
                String pais = partes[1].trim();

                consulta = "SELECT idCiudad FROM InfoAerolinea.Ciudad WHERE Nom_Ciudad = '"+ciudad+"' AND Pais = '"+pais+"'";
                PreparedStatement pstmt = conexion.prepareStatement(consulta);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    cdCalue = rs.getString("idCiudad");
                }
            } else {
                consulta = "SELECT Nom_Ciudad, Pais FROM InfoAerolinea.Ciudad WHERE idCiudad = "+val;
                PreparedStatement pstmt = conexion.prepareStatement(consulta);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    String nomCiudad = rs.getString("Nom_Ciudad");
                    String nomPais = rs.getString("Pais");
                    cdCalue = nomCiudad + " - " + nomPais;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return cdCalue;
    }

    /**
     * Maneja el evento de clic en una fila de la tabla JT_Vuelo.
     * Muestra los detalles del vuelo seleccionado y habilita los controles de modificación y eliminación.
     */
    private void JT_VueloMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JT_VueloMouseClicked
        lbl_Modifica.setVisible(true);
        btn_Agregar_Vuelo.setEnabled(false);
        btn_Eliminar_Vuelo.setEnabled(true);
        btn_Modificar_Vuelo.setEnabled(true);
        btn_backVuelo.setEnabled(true);

        int filaSeleccionada = JT_Vuelo.getSelectedRow();
        currentID = JT_Vuelo.getValueAt(filaSeleccionada, 0).toString();
        String CDorigen = JT_Vuelo.getValueAt(filaSeleccionada, 1).toString();
        String CDdestino = JT_Vuelo.getValueAt(filaSeleccionada, 2).toString();
        String DuracionHoras = JT_Vuelo.getValueAt(filaSeleccionada, 3).toString();
        String CostoBase = JT_Vuelo.getValueAt(filaSeleccionada, 4).toString();

        String valorLimpio = CostoBase.replaceAll("[\\$,]", "");
        tb_CostBaseVuelo.setText(valorLimpio);

        int valorEntero = Integer.parseInt(DuracionHoras);
        JS_DuracionVuelo.setValue(valorEntero);

        for (int i = 0; i < JCB_CiudOrgVuelo.getItemCount(); i++) {
            String item = (String) JCB_CiudOrgVuelo.getItemAt(i);

            if (item.equals(CDorigen)) {
                JCB_CiudOrgVuelo.setSelectedIndex(i);
                break;
            }
        }

        for (int i = 0; i < JCB_CiudDestVuelo.getItemCount(); i++) {
            String item = (String) JCB_CiudDestVuelo.getItemAt(i);

            if (item.equals(CDdestino)) {
                JCB_CiudDestVuelo.setSelectedIndex(i);
                break;
            }
        }
    }//GEN-LAST:event_JT_VueloMouseClicked

    /**
     * Maneja el evento de clic en el botón para eliminar un vuelo.
     * Si no se selecciona correctamente un registro, se muestra un mensaje informativo.
     * Se ejecuta una consulta SQL para eliminar el vuelo con el ID actual.
     */
    private void btn_Eliminar_VueloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eliminar_VueloActionPerformed
        if (currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String query = "DELETE FROM InfoAerolinea.Vuelo WHERE idVuelo = " + currentID;
        if(Query1(query)==-1)
        {
            String mensaje = "No se pudo eliminar porque aparece \ncomo clave foranea en otra tabla";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        consultaDatosVuelo();
        btn_backVueloActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Eliminar_VueloActionPerformed

    /**
     * Maneja el evento de clic en el botón para modificar un vuelo.
     * Si no se selecciona correctamente un registro o no se ingresan correctamente los nuevos datos, se muestra un mensaje informativo.
     * Se ejecuta una consulta SQL para modificar el vuelo con el ID actual.
     */
    private void btn_Modificar_VueloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Modificar_VueloActionPerformed
        if (tb_CostBaseVuelo.getText().equals("") || JCB_CiudOrgVuelo.getSelectedIndex() == JCB_CiudDestVuelo.getSelectedIndex() || JCB_CiudDestVuelo.getSelectedIndex() == -1 || JCB_CiudOrgVuelo.getSelectedIndex() == -1 || currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro y sus nuevos datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        //Funcion para obtener el idCiudad a traves del contenido del combobox
        String idCdorg = getCiudad((String) JCB_CiudOrgVuelo.getSelectedItem(), false);
        //Funcion para obtener el idCiudad a traves del contenido del combobox
        String idCddst = getCiudad((String) JCB_CiudDestVuelo.getSelectedItem(), false);
        String Query = "UPDATE InfoAerolinea.Vuelo SET idOrigen = " + idCdorg + ", idDestino = " + idCddst + ", DuracionHoras = " + JS_DuracionVuelo.getValue() + ", CostoBase = " + tb_CostBaseVuelo.getText() + " WHERE idVuelo = " + currentID;
        Query1(Query);
        consultaDatosVuelo();
        btn_backVueloActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Modificar_VueloActionPerformed

    /**
     * Maneja el evento de clic en el botón para agregar un nuevo vuelo.
     * Si no se ingresan correctamente los datos, se muestra un mensaje informativo.
     * Se ejecuta una consulta SQL para agregar un nuevo vuelo.
     */
    private void btn_Agregar_VueloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Agregar_VueloActionPerformed
        if (tb_CostBaseVuelo.getText().equals("") || JCB_CiudOrgVuelo.getSelectedIndex() == JCB_CiudDestVuelo.getSelectedIndex() || JCB_CiudDestVuelo.getSelectedIndex() == -1 || JCB_CiudOrgVuelo.getSelectedIndex() == -1) {
            String mensaje = "Ingresa correctamente los datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        //Funcion para obtener el idCiudad a traves del contenido del combobox
        String idCdorg = getCiudad((String) JCB_CiudOrgVuelo.getSelectedItem(), false);
        //Funcion para obtener el idCiudad a traves del contenido del combobox
        String idCddst = getCiudad((String) JCB_CiudDestVuelo.getSelectedItem(), false);
        String Query = "INSERT INTO InfoAerolinea.Vuelo (idOrigen, idDestino, DuracionHoras, CostoBase) VALUES (" + idCdorg + "," + idCddst + "," + JS_DuracionVuelo.getValue() + ", " + tb_CostBaseVuelo.getText() + ")";
        Query1(Query);
        consultaDatosVuelo();
        btn_backVueloActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Agregar_VueloActionPerformed

    /**
     * Maneja el evento de escritura en el campo de costo base del vuelo.
     * Permite solo dígitos y un punto decimal, y asegura que solo haya dos decimales.
     */
    private void tb_CostBaseVueloKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_CostBaseVueloKeyTyped
        char c = evt.getKeyChar();

        // Permite solo dígitos y un punto decimal
        if (!Character.isDigit(c) && c != '.') {
            evt.consume();
        }

        // Asegura que solo haya un punto decimal
        if (c == '.' && tb_CostBaseVuelo.getText().contains(".")) {
            evt.consume();
        }

        // Permite solo dos decimales
        String text = tb_CostBaseVuelo.getText();
        if (text.contains(".") && text.split("\\.").length > 1 && text.split("\\.")[1].length() >= 2 && c != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }
    }//GEN-LAST:event_tb_CostBaseVueloKeyTyped

    /**
     * Maneja el evento de clic en el botón para regresar en la interfaz de vuelos.
     * Restablece los campos y controles a su estado inicial.
     */
    private void btn_backVueloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backVueloActionPerformed
        lbl_Modifica.setVisible(false);
        btn_Agregar_Vuelo.setEnabled(true);
        btn_Eliminar_Vuelo.setEnabled(false);
        btn_Modificar_Vuelo.setEnabled(false);
        btn_backVuelo.setEnabled(false);
        tb_CostBaseVuelo.setText("");
        JS_DuracionVuelo.setValue(1);
        JCB_CiudOrgVuelo.setSelectedIndex(-1); // Seleccionar "Ninguno"
        JCB_CiudDestVuelo.setSelectedIndex(-1); // Seleccionar "Ninguno"
        currentID = "";
    }//GEN-LAST:event_btn_backVueloActionPerformed

    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="METODOS VENTANA ITINERARIO">
    
    /**
     * Llena los ComboBox de Piloto, Avión y Vuelo con información obtenida de la base de datos.
     * Selecciona solo aviones con EstadoUso verdadero.
     */
    public void LlenarCBitinerario() {
        try {
            // Conexión a la base de datos (asegúrate de manejar excepciones)
            Connection conn = DriverManager.getConnection(URL, USER, PASS);

            // Llenar ComboBox para Piloto
            String queryPiloto = "SELECT idPiloto, Nom_Piloto FROM InfoAerolinea.Piloto";
            try (PreparedStatement pstmtPiloto = conn.prepareStatement(queryPiloto); ResultSet rsPiloto = pstmtPiloto.executeQuery()) {

                while (rsPiloto.next()) {
                    JCB_PilotoItinerario.addItem(rsPiloto.getString("idPiloto") + " - " + rsPiloto.getString("Nom_Piloto"));
                }
            }

            // Llenar ComboBox para Avión
            String queryAvion = "SELECT idAvion, idAerolinea, Modelo, EstadoUso FROM InfoAerolinea.Avion";
            try (PreparedStatement pstmtAvion = conn.prepareStatement(queryAvion); ResultSet rsAvion = pstmtAvion.executeQuery()) {
                while (rsAvion.next()) {
                    if (rsAvion.getBoolean("EstadoUso")) {
                        String aerolinea = getAerolinea(rsAvion.getString("idAerolinea"), true);
                        String[] partes = aerolinea.split("\\(");
                        if (partes.length > 0) {
                            aerolinea = partes[0].trim();
                        }
                        JCB_AvionItinerario.addItem(rsAvion.getString("idAvion") + " - " + rsAvion.getString("Modelo") + " - " + aerolinea);
                    }
                }
            }

            // Llenar ComboBox para Vuelo
            String queryVuelo = "SELECT idVuelo, idOrigen, idDestino FROM InfoAerolinea.Vuelo";
            String[] partes;
            try (PreparedStatement pstmtVuelo = conn.prepareStatement(queryVuelo); ResultSet rsVuelo = pstmtVuelo.executeQuery()) {

                while (rsVuelo.next()) {
                    String origen = getCiudad(rsVuelo.getString("idOrigen"), true);
                    partes = origen.split("-");
                    if (partes.length > 0) {
                        origen = partes[0].trim();
                    }
                    String destino = getCiudad(rsVuelo.getString("idDestino"), true);
                    partes = destino.split("-");
                    if (partes.length > 0) {
                        destino = partes[0].trim();
                    }
                    JCB_VueloItinerario.addItem(origen + " - " + destino);
                    listIDVuelo.add(rsVuelo.getInt("idVuelo"));
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Realiza una consulta a la base de datos para obtener información de itinerarios
     * y actualiza el modelo de la tabla JT_Itinerario con los resultados.
     */
    public void consultaDatosItinerario()
    {
        try{
            CONN = ConnectBD();
            java.sql.Statement Stmnt = CONN.createStatement();
            String Query = "SELECT * FROM InfoAerolinea.Itinerario";
            String[]Data = new String[6];
            ResultSet Columns = Stmnt.executeQuery (Query);
            DefaultTableModel model = (DefaultTableModel) JT_Itinerario.getModel();
            
            // Eliminar todas las filas existentes
            model.setRowCount(0);
            while(Columns.next())
            {
                Data[0]=Columns.getString(1);
                Data[1]=getPiloto(Columns.getString(2), true);
                Data[2]=getAvion(Columns.getString(3), true);
                Data[3]=getVuelo(Columns.getString(4), true);
                Data[4]=Columns.getString(5);
                Data[5]=Columns.getString(6);
                model.addRow(Data);
            }
            Stmnt.close();
            CONN.close();
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    /**
     * Valida el formato de una hora en formato HH:MM.
     *
     * @param val La hora a validar.
     * @return true si la hora es válida, false de lo contrario.
     */
    private boolean ValidarHora(String val) {
        String horaText = val;
        String[] partes = horaText.split(":");

        if (partes.length == 2) {
            int horas = Integer.parseInt(partes[0]);
            int minutos = Integer.parseInt(partes[1]);

            if (horas > 24 || minutos > 59) {
                JOptionPane.showMessageDialog(null, "Por favor, ingrese una hora válida.");
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese una hora válida.");
            return false;
        }
        return true;
    }
    
    /**
     * Obtiene la información de un piloto, ya sea por ID o por nombre,
     * de acuerdo al valor proporcionado y al flag indicado.
     *
     * @param val  El valor a buscar (puede ser el nombre del piloto o su ID).
     * @param flag Indica si se busca por nombre (false) o por ID (true).
     * @return La información del piloto en formato "idPiloto - Nombre" o el ID del piloto.
     */
    private String getPiloto(String val, boolean flag) {
        String pilotoValue = "";
        try (Connection conexion = DriverManager.getConnection(URL, USER, PASS)) {
            if (!flag) {
                int indiceGuionInicio = val.indexOf('-');
                pilotoValue = val.substring(0, indiceGuionInicio).trim();
            } else {
                
                String Query = "SELECT idPiloto, Nom_Piloto FROM InfoAerolinea.Piloto WHERE idPiloto = "+val;
                PreparedStatement pstmt = conexion.prepareStatement(Query);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    pilotoValue = rs.getString("idPiloto") + " - " + rs.getString("Nom_Piloto");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return pilotoValue;
    }

    /**
     * Obtiene la información de un avión, ya sea por ID o por modelo,
     * de acuerdo al valor proporcionado y al flag indicado.
     *
     * @param val  El valor a buscar (puede ser el modelo del avión o su ID).
     * @param flag Indica si se busca por modelo (false) o por ID (true).
     * @return La información del avión en formato "idAvion - Modelo - Aerolínea" o el ID del avión.
     */
    private String getAvion(String val, boolean flag) {
        String AvionValue = "";
        try (Connection conexion = DriverManager.getConnection(URL, USER, PASS)) {
            if (!flag) {
                int indiceGuionInicio = val.indexOf('-');
                AvionValue = val.substring(0, indiceGuionInicio).trim();
            } else {
                
                String Query = "SELECT idAvion,idAerolinea,Modelo FROM InfoAerolinea.Avion WHERE idAvion="+val;
                PreparedStatement pstmt = conexion.prepareStatement(Query);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    String aerolinea = getAerolinea(rs.getString("idAerolinea"), true);
                    String[] partes = aerolinea.split("\\(");
                    if (partes.length > 0) {
                        aerolinea = partes[0].trim();
                    }
                    AvionValue = rs.getString("idAvion") + " - " + rs.getString("Modelo") + " - " + aerolinea;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return AvionValue;    
    }

    /**
     * Obtiene la información de un vuelo, ya sea por ID o por origen y destino,
     * de acuerdo al valor proporcionado y al flag indicado.
     *
     * @param val  El valor a buscar (puede ser el origen y destino del vuelo o su ID).
     * @param flag Indica si se busca por origen y destino (false) o por ID (true).
     * @return La información del vuelo en formato "Origen - Destino" o el ID del vuelo.
     */
    private String getVuelo(String val, boolean flag) {
        String VueloValue = "";
        try (Connection conexion = DriverManager.getConnection(URL, USER, PASS)) {
            if (!flag) {
                VueloValue = listIDVuelo.get(JCB_VueloItinerario.getSelectedIndex()).toString();
            } else {
                String[] partes;
                String Query = "SELECT idOrigen, idDestino FROM InfoAerolinea.Vuelo WHERE idVuelo=" + val;
                PreparedStatement pstmt = conexion.prepareStatement(Query);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    String origen = getCiudad(rs.getString("idOrigen"), true);
                    partes = origen.split("-");
                    if (partes.length > 0) {
                        origen = partes[0].trim();
                    }
                    String destino = getCiudad(rs.getString("idDestino"), true);
                    partes = destino.split("-");
                    if (partes.length > 0) {
                        destino = partes[0].trim();
                    }
                    VueloValue = origen + " - " + destino;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return VueloValue;
    }

    /**
     * Maneja el evento de clic en una fila de la tabla JT_Itinerario.
     * Muestra los detalles del itinerario seleccionado y habilita los controles de modificación y eliminación.
     */
    private void JT_ItinerarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JT_ItinerarioMouseClicked
        lbl_Modifica.setVisible(true);
        btn_Agregar_Itinerario.setEnabled(false);
        btn_Eliminar_Itinerario.setEnabled(true);
        btn_Modificar_Itinerario.setEnabled(true);
        btn_backItinerario.setEnabled(true);

        int filaSeleccionada = JT_Itinerario.getSelectedRow();
        currentID = JT_Itinerario.getValueAt(filaSeleccionada, 0).toString();
        String piloto = JT_Itinerario.getValueAt(filaSeleccionada, 1).toString();
        String avion = JT_Itinerario.getValueAt(filaSeleccionada, 2).toString();
        String vuelo = JT_Itinerario.getValueAt(filaSeleccionada, 3).toString();
        String horavuelo = JT_Itinerario.getValueAt(filaSeleccionada, 4).toString();
        String fechavuelo = JT_Itinerario.getValueAt(filaSeleccionada, 5).toString();

        SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date fechaSeleccionada = null;
        try {
            fechaSeleccionada = formatoFecha.parse(fechavuelo);
        } catch (ParseException ex) {
            Logger.getLogger(AEROPUERTO.class.getName()).log(Level.SEVERE, null, ex);
        }
        JC_FechaVueloItinerario.setDate(fechaSeleccionada);
        horavuelo = horavuelo.substring(0, horavuelo.lastIndexOf(":"));
        TF_HoraSalItinerario.setText(horavuelo);

        for (int i = 0; i < JCB_PilotoItinerario.getItemCount(); i++) {
            String item = (String) JCB_PilotoItinerario.getItemAt(i);

            if (item.equals(piloto)) {
                JCB_PilotoItinerario.setSelectedIndex(i);
                break;
            }
        }

        for (int i = 0; i < JCB_VueloItinerario.getItemCount(); i++) {
            String item = (String) JCB_VueloItinerario.getItemAt(i);

            if (item.equals(vuelo)) {
                JCB_VueloItinerario.setSelectedIndex(i);
                break;
            }
        }

        for (int i = 0; i < JCB_AvionItinerario.getItemCount(); i++) {
            String item = (String) JCB_AvionItinerario.getItemAt(i);

            if (item.equals(avion)) {
                JCB_AvionItinerario.setSelectedIndex(i);
                break;
            }
        }
    }//GEN-LAST:event_JT_ItinerarioMouseClicked

    /**
     * Maneja el evento de clic en el botón para eliminar un itinerario.
     * Si no se selecciona correctamente un registro, se muestra un mensaje informativo.
     * Se ejecuta una consulta SQL para eliminar el itinerario con el ID actual.
     */
    private void btn_Eliminar_ItinerarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eliminar_ItinerarioActionPerformed
        if (currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String query = "DELETE FROM InfoAerolinea.Itinerario WHERE idItinerario = " + currentID;
        if(Query1(query)==-1)
        {
            String mensaje = "No se pudo eliminar porque aparece \ncomo clave foranea en otra tabla";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        consultaDatosItinerario();
        btn_backItinerarioActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Eliminar_ItinerarioActionPerformed

    /**
     * Maneja el evento de clic en el botón para modificar un itinerario.
     * Si no se selecciona correctamente un registro o no se ingresan correctamente los nuevos datos, se muestra un mensaje informativo.
     * Se ejecuta una consulta SQL para modificar el itinerario con el ID actual.
     */
    private void btn_Modificar_ItinerarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Modificar_ItinerarioActionPerformed
        if (!ValidarHora(TF_HoraSalItinerario.getText())||JC_FechaVueloItinerario.getDate() == null||TF_HoraSalItinerario.getText().equals("")||JCB_PilotoItinerario.getSelectedIndex() == -1 || JCB_VueloItinerario.getSelectedIndex() == -1 || JCB_AvionItinerario.getSelectedIndex() == -1|| currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro y sus nuevos datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        JCalendar fechaNac = JC_FechaVueloItinerario;
        Date fechaSeleccionada = new Date(fechaNac.getDate().getTime());
        String PilotoID = getPiloto((String) JCB_PilotoItinerario.getSelectedItem(), false);
        String AvionID = getAvion((String) JCB_AvionItinerario.getSelectedItem(), false);
        String VueloID = getVuelo((String) JCB_VueloItinerario.getSelectedItem(),false);

        String Query = "UPDATE InfoAerolinea.Itinerario SET idPiloto = " + PilotoID + ", idAvion = " + AvionID + ",idVuelo = " + VueloID + ", HoraSalida = '" + TF_HoraSalItinerario.getText() + "', FechaVuelo = '"+ fechaSeleccionada + "' WHERE idItinerario = " + currentID;
        if(Query1(Query)==-1)
        {
            String mensaje = "Ocurrió una excepción: \nNo se puede agergar dos vuelos del mismo piloto en el mismo dia";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        consultaDatosItinerario();
        btn_backItinerarioActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Modificar_ItinerarioActionPerformed

    /**
     * Maneja el evento de clic en el botón para agregar un nuevo itinerario.
     * Si no se ingresan correctamente los datos, se muestra un mensaje informativo.
     * Se ejecuta una consulta SQL para agregar un nuevo itinerario.
     */
    private void btn_Agregar_ItinerarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Agregar_ItinerarioActionPerformed
        if (!ValidarHora(TF_HoraSalItinerario.getText())||JC_FechaVueloItinerario.getDate() == null||TF_HoraSalItinerario.getText().equals("")||JCB_PilotoItinerario.getSelectedIndex() == -1 || JCB_VueloItinerario.getSelectedIndex() == -1 || JCB_AvionItinerario.getSelectedIndex() == -1) {
            String mensaje = "Ingresa correctamente los datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        JCalendar fechaNac = JC_FechaVueloItinerario;
        Date fechaSeleccionada = new Date(fechaNac.getDate().getTime());
        String PilotoID = getPiloto((String) JCB_PilotoItinerario.getSelectedItem(), false);
        String AvionID = getAvion((String) JCB_AvionItinerario.getSelectedItem(), false);
        String VueloID = getVuelo((String) JCB_VueloItinerario.getSelectedItem(),false);

        String Query = "INSERT INTO InfoAerolinea.Itinerario (idPiloto, idAvion, idVuelo, HoraSalida, FechaVuelo) VALUES (" + PilotoID + "," + AvionID + "," + VueloID + ", '" + TF_HoraSalItinerario.getText() + "', '"+ fechaSeleccionada + "')";
        if(Query1(Query)==-1)
        {
            String mensaje = "Ocurrió una excepción: \nNo se puede agergar dos vuelos del mismo piloto en el mismo dia";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        consultaDatosItinerario();
        btn_backItinerarioActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Agregar_ItinerarioActionPerformed

    /**
     * Maneja el evento de clic en el botón para regresar en la interfaz de itinerarios.
     * Restablece los campos y controles a su estado inicial.
     */
    private void btn_backItinerarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backItinerarioActionPerformed
        lbl_Modifica.setVisible(false);
        btn_Agregar_Itinerario.setEnabled(true);
        btn_Eliminar_Itinerario.setEnabled(false);
        btn_Modificar_Itinerario.setEnabled(false);
        btn_backItinerario.setEnabled(false);

        JCB_PilotoItinerario.setSelectedIndex(-1); // Seleccionar "Ninguno"
        JCB_VueloItinerario.setSelectedIndex(-1); // Seleccionar "Ninguno"
        JCB_AvionItinerario.setSelectedIndex(-1); // Seleccionar "Ninguno"
        TF_HoraSalItinerario.setText("");
        Calendar calendar = Calendar.getInstance();
        java.util.Date fechaActual = calendar.getTime();
        JC_FechaVueloItinerario.setDate(fechaActual);
        currentID = "";
    }//GEN-LAST:event_btn_backItinerarioActionPerformed

    /**
     * Maneja el evento de escritura en el campo de hora de salida del itinerario.
     * Permite solo dígitos y dos puntos, y verifica el formato HH:MM.
     */
    private void TF_HoraSalItinerarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TF_HoraSalItinerarioKeyTyped
        char c = evt.getKeyChar();
        String horaActual = TF_HoraSalItinerario.getText();

        // Asegura que solo se ingresen dígitos y dos puntos
        if (!Character.isDigit(c) && c != ':' || horaActual.length() >= 5) {
            evt.consume();
        }

        // Verifica el formato HH:MM
        if (Character.isDigit(c) && horaActual.length() == 2) {
            TF_HoraSalItinerario.setText(horaActual + ":");
        }

        // Asegura que solo haya un punto y se encuentre en la posición correcta
        if (c == ':' && (horaActual.contains(":") || horaActual.length() >= 5)) {
            evt.consume();
        }
    }//GEN-LAST:event_TF_HoraSalItinerarioKeyTyped
    
    // </editor-fold>
    
    // </editor-fold>

    /// Metodos para ventanas de tablas del esquema InfoPasajero
    // <editor-fold defaultstate="collapsed" desc="InfoPasajero">

    // <editor-fold defaultstate="collapsed" desc="METODOS VENTANA PASAJERO">
    
    /**
     * Realiza una consulta a la base de datos para obtener los datos de los pasajeros
     * y actualiza el modelo de la tabla con los resultados.
     */
    public void ConsultaDatosPasajero(){
        try{
            CONN = ConnectBD();
            java.sql.Statement Stmnt = CONN.createStatement();
            String Query = "SELECT * FROM InfoPasajero.Pasajero";
            String[]Data = new String[10];
            ResultSet Columns = Stmnt.executeQuery (Query);
            DefaultTableModel model = (DefaultTableModel) JT_Pasajero.getModel();
            
            // Eliminar todas las filas existentes
            model.setRowCount(0);
            while(Columns.next())
            {
                Data[0]=Columns.getString(1);
                Data[1]=Columns.getString(2);
                Data[2]=Columns.getString(3);
                Data[3]=Columns.getString(4);
                Data[4]=Columns.getString(5);
                Data[5]=Columns.getString(6);
                Data[6]=Columns.getString(7);
                Data[7]=Columns.getString(8);
                Data[8]=Columns.getString(9);
                Data[9]=Columns.getString(10);
                model.addRow(Data);
            }
            Stmnt.close();
            CONN.close();
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    /**
     * Elimina un pasajero de la base de datos según el ID actualmente seleccionado.
     * Actualiza la tabla después de la eliminación.
     */
    private void btn_Eliminar_PasajeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eliminar_PasajeroActionPerformed
        if (currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String query = "DELETE FROM InfoPasajero.Pasajero WHERE idPasajero = " + currentID;
        if(Query1(query)==-1)
        {
            String mensaje = "No se pudo eliminar porque aparece \ncomo clave foranea en otra tabla";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        ConsultaDatosPasajero();
        btn_backPasajeroActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Eliminar_PasajeroActionPerformed

    /**
     * Modifica un pasajero en la base de datos con los nuevos datos ingresados.
     * Actualiza la tabla después de la modificación.
     */
    private void btn_Modificar_PasajeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Modificar_PasajeroActionPerformed
        String pattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$";
        Pattern regex = Pattern.compile(pattern);
        String email = tb_EmailPasajero.getText();
        Matcher matcher = regex.matcher(email);
        if (currentID.equals("") ||!matcher.matches()||tb_NombrePasajero.getText().equals("") || tb_NacionalidadPasajero.getText().equals("") ||tb_NumPassPasajero.getText().equals("") ||tb_NumTelPasajero.getText().equals("") ||tb_ContEmergenciaPasajero.getText().equals("") ||tb_EmailPasajero.getText().equals("") || JCB_GeneroPasajero.getSelectedIndex() == -1 || JC_FechaNacPasajero.getDate() == null || tb_NumPassPasajero.getText().length() != 10|| tb_NumTelPasajero.getText().length() != 10|| tb_ContEmergenciaPasajero.getText().length() != 10) {
            String mensaje = "Selecciona correctamente un registro y sus nuevos datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        
        JCalendar fechaNac = JC_FechaNacPasajero;
        Date fechaSeleccionada = new Date(fechaNac.getDate().getTime());
        String Query = "UPDATE InfoPasajero.Pasajero SET Nom_Pasajero = '" + tb_NombrePasajero.getText() + "', FechaNacimiento = '" + fechaSeleccionada + "', Nacionalidad='" + tb_NacionalidadPasajero.getText() + "', Genero='" + JCB_GeneroPasajero.getSelectedItem() + "', NumPasaporte='" + tb_NumPassPasajero.getText() + "', Telefono=" + tb_NumTelPasajero.getText() + ", ContactoEmergencia=" + tb_ContEmergenciaPasajero.getText() + ", Email='" + email + "' WHERE idPasajero = " + currentID;
        if(Query1(Query)==-1)
        {
            String mensaje = "No se pudo agregar \nSe esta intentando agregar un Número de Pasaporte, Teléfono o Email \nque pertenece a otro pasajero\no se tiene una edad invalida";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        ConsultaDatosPasajero();
        btn_backPasajeroActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Modificar_PasajeroActionPerformed

    /**
     * Agrega un nuevo pasajero a la base de datos con los datos ingresados.
     * Actualiza la tabla después de la adición.
     */
    private void btn_Agregar_PasajeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Agregar_PasajeroActionPerformed
        String pattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$";
        Pattern regex = Pattern.compile(pattern);
        String email = tb_EmailPasajero.getText();
        Matcher matcher = regex.matcher(email);
        if (!matcher.matches()||tb_NombrePasajero.getText().equals("") || tb_NacionalidadPasajero.getText().equals("") ||tb_NumPassPasajero.getText().equals("") ||tb_NumTelPasajero.getText().equals("") ||tb_ContEmergenciaPasajero.getText().equals("") ||tb_EmailPasajero.getText().equals("") || JCB_GeneroPasajero.getSelectedIndex() == -1 || JC_FechaNacPasajero.getDate() == null || tb_NumPassPasajero.getText().length() != 10|| tb_NumTelPasajero.getText().length() != 10|| tb_ContEmergenciaPasajero.getText().length() != 10) {
            String mensaje = "Ingresa correctamente los datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        
        JCalendar fechaNac = JC_FechaNacPasajero;
        Date fechaSeleccionada = new Date(fechaNac.getDate().getTime());
        String Query = "INSERT INTO InfoPasajero.Pasajero (Nom_Pasajero, FechaNacimiento, Nacionalidad, Genero, NumPasaporte, Telefono, ContactoEmergencia, Email) VALUES ('" + tb_NombrePasajero.getText() + "','" + fechaSeleccionada + "','" + tb_NacionalidadPasajero.getText() + "','" + JCB_GeneroPasajero.getSelectedItem() + "','" + tb_NumPassPasajero.getText() + "'," + tb_NumTelPasajero.getText() + "," + tb_ContEmergenciaPasajero.getText() + ",'" + email + "')";
        if(Query1(Query)==-1)
        {
            String mensaje = "No se pudo agregar \nSe esta intentando agregar un Número de Pasaporte, Teléfono o Email \nque pertenece a otro pasajero\no se tiene una edad invalida";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        ConsultaDatosPasajero();
        btn_backPasajeroActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Agregar_PasajeroActionPerformed

    /**
     * Maneja el evento cuando se presiona una tecla en el campo de contacto de emergencia.
     * Solo permite dígitos y limita la longitud a 10 caracteres.
     */
    private void tb_ContEmergenciaPasajeroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_ContEmergenciaPasajeroKeyTyped
        char c = evt.getKeyChar();
        // Verificar si el carácter es un número o la tecla de borrar
        if (!Character.isDigit(c) && c != '\b') {
            evt.consume(); // Consumir el evento si no es un número o la tecla de borrar
        }

        // Verificar si ya hay 10 caracteres en el campo
        if (tb_ContEmergenciaPasajero.getText().length() >= 10) {
            evt.consume(); // Consumir el evento si ya hay 10 caracteres
        }
    }//GEN-LAST:event_tb_ContEmergenciaPasajeroKeyTyped

    /**
     * Maneja el evento cuando se presiona una tecla en el campo de número de teléfono.
     * Solo permite dígitos y limita la longitud a 10 caracteres.
     */
    private void tb_NumTelPasajeroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_NumTelPasajeroKeyTyped
        char c = evt.getKeyChar();
        // Verificar si el carácter es un número o la tecla de borrar
        if (!Character.isDigit(c) && c != '\b') {
            evt.consume(); // Consumir el evento si no es un número o la tecla de borrar
        }

        // Verificar si ya hay 10 caracteres en el campo
        if (tb_NumTelPasajero.getText().length() >= 10) {
            evt.consume(); // Consumir el evento si ya hay 10 caracteres
        }
    }//GEN-LAST:event_tb_NumTelPasajeroKeyTyped

    /**
     * Maneja el evento cuando se presiona una tecla en el campo de número de pasaporte.
     * Solo permite letras y dígitos, convierte las letras a mayúsculas y limita la longitud a 10 caracteres.
     */
    private void tb_NumPassPasajeroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_NumPassPasajeroKeyTyped
        char c = evt.getKeyChar();

        // Verificar si el carácter es una letra o un número
        if (!Character.isLetterOrDigit(c)) {
            evt.consume(); // Consumir el evento si no es una letra o número
        }

        // Convertir las letras a mayúsculas
        if (Character.isLetter(c)) {
            c = Character.toUpperCase(c);
            evt.setKeyChar(c);
        }

        // Verificar si ya hay 10 caracteres en el campo
        if (tb_NumPassPasajero.getText().length() >= 10) {
            evt.consume(); // Consumir el evento si ya hay 10 caracteres
        }
    }//GEN-LAST:event_tb_NumPassPasajeroKeyTyped

    /**
     * Restablece los campos de entrada y la interfaz después de realizar una operación.
     */
    private void btn_backPasajeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backPasajeroActionPerformed
        lbl_Modifica.setVisible(false);
        btn_Agregar_Pasajero.setEnabled(true);
        btn_Eliminar_Pasajero.setEnabled(false);
        btn_Modificar_Pasajero.setEnabled(false);
        btn_backPasajero.setEnabled(false);

        tb_NombrePasajero.setText("");
        Calendar calendar = Calendar.getInstance();
        java.util.Date fechaActual = calendar.getTime();
        JC_FechaNacPasajero.setDate(fechaActual);
        tb_NacionalidadPasajero.setText("");
        JCB_GeneroPasajero.setSelectedIndex(-1); // Seleccionar "Ninguno"
        tb_NumPassPasajero.setText("");
        tb_NumTelPasajero.setText("");
        tb_ContEmergenciaPasajero.setText("");
        tb_EmailPasajero.setText("");

        currentID = "";
    }//GEN-LAST:event_btn_backPasajeroActionPerformed

    /**
     * Maneja el evento cuando se hace clic en la tabla de pasajeros.
     * Muestra los detalles del pasajero seleccionado en los campos de entrada.
     */
    private void JT_PasajeroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JT_PasajeroMouseClicked
        lbl_Modifica.setVisible(true);
        btn_Agregar_Pasajero.setEnabled(false);
        btn_Eliminar_Pasajero.setEnabled(true);
        btn_Modificar_Pasajero.setEnabled(true);
        btn_backPasajero.setEnabled(true);

        int filaSeleccionada = JT_Pasajero.getSelectedRow();
        currentID = JT_Pasajero.getValueAt(filaSeleccionada, 0).toString();
        String NomPas = JT_Pasajero.getValueAt(filaSeleccionada, 1).toString();
        String FechaNac = JT_Pasajero.getValueAt(filaSeleccionada, 2).toString();
        String Nac = JT_Pasajero.getValueAt(filaSeleccionada, 4).toString();
        String Genero = JT_Pasajero.getValueAt(filaSeleccionada, 5).toString();
        String NumPas = JT_Pasajero.getValueAt(filaSeleccionada, 6).toString();
        String Tel = JT_Pasajero.getValueAt(filaSeleccionada, 7).toString();
        String ContEm = JT_Pasajero.getValueAt(filaSeleccionada, 8).toString();
        String Email = JT_Pasajero.getValueAt(filaSeleccionada, 9).toString();

        SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date fechaSeleccionada = null;
        try {
            fechaSeleccionada = formatoFecha.parse(FechaNac);
        } catch (ParseException ex) {
            Logger.getLogger(AEROPUERTO.class.getName()).log(Level.SEVERE, null, ex);
        }

        tb_NombrePasajero.setText(NomPas);
        JC_FechaNacPasajero.setDate(fechaSeleccionada);
        tb_NacionalidadPasajero.setText(Nac);
        JCB_GeneroPasajero.setSelectedIndex(-1); // Seleccionar "Ninguno"
        tb_NumPassPasajero.setText(NumPas);
        tb_NumTelPasajero.setText(Tel);
        tb_ContEmergenciaPasajero.setText(ContEm);
        tb_EmailPasajero.setText(Email);
        
        for (int i = 0; i < JCB_GeneroPasajero.getItemCount(); i++) {
            String item = (String) JCB_GeneroPasajero.getItemAt(i);

            if (item.equals(Genero)) {
                JCB_GeneroPasajero.setSelectedIndex(i);
                break;
            }
        }
    }//GEN-LAST:event_JT_PasajeroMouseClicked

    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="METODOS VENTANA TARJETA_PASAJERO">
    
    /**
     * Llena el JComboBox con los últimos 4 dígitos del pasaporte y el nombre de los pasajeros.
     */
    public void LlenarCBTarjPasaj() {
        try {
            Connection conexion = DriverManager.getConnection(URL, USER, PASS);
            Statement statement = conexion.createStatement();
            String query = "SELECT Nom_Pasajero, NumPasaporte FROM InfoPasajero.Pasajero";
            ResultSet resultSet = statement.executeQuery(query);

            while (resultSet.next()) {
                String digitnumpass = resultSet.getString("NumPasaporte").substring(resultSet.getString("NumPasaporte").length() - 4);
                JCB_PasajeroTarPasajero.addItem(digitnumpass + " - " + resultSet.getString("Nom_Pasajero"));
            }

            resultSet.close();
            statement.close();
            conexion.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Realiza una consulta a la base de datos para obtener los datos de las tarjetas de pasajero
     * y actualiza el modelo de la tabla con los resultados.
     */
    public void ConsultaDatosTarPasajero(){
        try{
            CONN = ConnectBD();
            java.sql.Statement Stmnt = CONN.createStatement();
            String Query = "SELECT * FROM InfoPasajero.TarjetaPasajero";
            String[]Data = new String[7];
            ResultSet Columns = Stmnt.executeQuery (Query);
            DefaultTableModel model = (DefaultTableModel) JT_TarPasajero.getModel();
            
            // Eliminar todas las filas existentes
            model.setRowCount(0);
            while(Columns.next())
            {
                Data[0]=Columns.getString(1);
                Data[1]=getPasajero(Columns.getString(2), true);
                Data[2]=Columns.getString(3);
                Data[3]=Columns.getString(4);
                Data[4]=Columns.getString(5);
                Data[5]=Columns.getString(6);
                Data[6]=Columns.getString(7);
                model.addRow(Data);
            }
            Stmnt.close();
            CONN.close();
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    /**
     * Restablece los campos de entrada y la interfaz después de realizar una operación en la sección de tarjetas de pasajero.
     */
    private void btn_backTarPasajeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backTarPasajeroActionPerformed
        lbl_Modifica.setVisible(false);
        btn_Agregar_TarPasajero.setEnabled(true);
        btn_Eliminar_TarPasajero.setEnabled(false);
        btn_Modificar_TarPasajero.setEnabled(false);
        btn_backTarPasajero.setEnabled(false);
        
        JCB_PasajeroTarPasajero.setSelectedIndex(-1); // Seleccionar "Ninguno"
        tb_NombreTarPasajero.setText("");
        tb_NumTarPasajero.setText("");
        tb_CVVTarPasajero.setText("");
        TF_FechaVenTarPasajero.setText("");

        currentID = "";
    }//GEN-LAST:event_btn_backTarPasajeroActionPerformed

    /**
     * Agrega una nueva tarjeta de pasajero a la base de datos con los datos ingresados.
     * Actualiza la tabla después de la adición.
     */
    private void btn_Agregar_TarPasajeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Agregar_TarPasajeroActionPerformed
        if (tb_NombreTarPasajero.getText().equals("") || tb_NumTarPasajero.getText().equals("") || JCB_PasajeroTarPasajero.getSelectedIndex() == -1 || tb_CVVTarPasajero.getText().equals("") || TF_FechaVenTarPasajero.getText().equals("") || tb_NumTarPasajero.getText().length() != 16 || tb_CVVTarPasajero.getText().length() != 3 || TF_FechaVenTarPasajero.getText().length() != 7) {
            String mensaje = "Ingresa correctamente los datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String PasajeroID = getPasajero((String) JCB_PasajeroTarPasajero.getSelectedItem(), false);
        String fechaFinal = "";
        try {
            fechaFinal = "01/" + TF_FechaVenTarPasajero.getText();
            SimpleDateFormat formatoEntrada = new SimpleDateFormat("dd/MM/yyyy");
            SimpleDateFormat formatoSalida = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date fecha = formatoEntrada.parse(fechaFinal);
            fechaFinal = formatoSalida.format(fecha);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        
        String Query = "INSERT INTO InfoPasajero.TarjetaPasajero (idPasajero, NombreTitular, Banco, NumTarjeta, FechaVencimiento, CVV) VALUES (" + PasajeroID + ",'" + tb_NombreTarPasajero.getText() + "', 'Desconocido', " + tb_NumTarPasajero.getText() + ", '" + fechaFinal + "', " + tb_CVVTarPasajero.getText() + ")";
        if(Query1(Query)==-1)
        {
            String mensaje = "No se pudo agregar \nEsa tarjeta ya existe";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        ConsultaDatosTarPasajero();
        btn_backTarPasajeroActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Agregar_TarPasajeroActionPerformed

    /**
     * Modifica una tarjeta de pasajero en la base de datos con los nuevos datos ingresados.
     * Actualiza la tabla después de la modificación.
     */
    private void btn_Modificar_TarPasajeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Modificar_TarPasajeroActionPerformed
        if (currentID.equals("") ||tb_NombreTarPasajero.getText().equals("") || tb_NumTarPasajero.getText().equals("") || JCB_PasajeroTarPasajero.getSelectedIndex() == -1 || tb_CVVTarPasajero.getText().equals("") || TF_FechaVenTarPasajero.getText().equals("") || tb_NumTarPasajero.getText().length() < 16 || tb_CVVTarPasajero.getText().length() < 3 || TF_FechaVenTarPasajero.getText().length() < 7) {
            String mensaje = "Selecciona correctamente un registro y sus nuevos datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String PasajeroID = getPasajero((String) JCB_PasajeroTarPasajero.getSelectedItem(), false);
        String fechaFinal = "";
        try {
            fechaFinal = "01/" + TF_FechaVenTarPasajero.getText();
            SimpleDateFormat formatoEntrada = new SimpleDateFormat("dd/MM/yyyy");
            SimpleDateFormat formatoSalida = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date fecha = formatoEntrada.parse(fechaFinal);
            fechaFinal = formatoSalida.format(fecha);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        
        String Query = "UPDATE InfoPasajero.TarjetaPasajero SET idPasajero = " + PasajeroID + ", NombreTitular = '" + tb_NombreTarPasajero.getText() + "', NumTarjeta = " + tb_NumTarPasajero.getText() + ", FechaVencimiento = '" + fechaFinal + "', CVV = " + tb_CVVTarPasajero.getText() + " WHERE idTarjetaPasajero = " + currentID;
        if(Query1(Query)==-1)
        {
            String mensaje = "No se pudo agregar \nEsa tarjeta ya existe";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        ConsultaDatosTarPasajero();
        btn_backTarPasajeroActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Modificar_TarPasajeroActionPerformed

    /**
     * Elimina una tarjeta de pasajero de la base de datos según el ID actualmente seleccionado.
     * Actualiza la tabla después de la eliminación.
     */
    private void btn_Eliminar_TarPasajeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eliminar_TarPasajeroActionPerformed
        if (currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String query = "DELETE FROM InfoPasajero.TarjetaPasajero WHERE idTarjetaPasajero = " + currentID;
        if(Query1(query)==-1)
        {
            String mensaje = "No se pudo eliminar porque aparece \ncomo clave foranea en otra tabla";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        ConsultaDatosTarPasajero();
        btn_backTarPasajeroActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Eliminar_TarPasajeroActionPerformed

    /**
     * Obtiene el ID del pasajero basado en el valor seleccionado en el JComboBox.
     *
     * @param val  El valor seleccionado en el JComboBox o el ID del pasajero (dependiendo del flag).
     * @param flag Si es verdadero, val representa el ID del pasajero; de lo contrario, es el valor seleccionado en el JComboBox.
     * @return El ID del pasajero o una cadena formateada para mostrar en el JComboBox.
     */
    private String getPasajero(String val, boolean flag) {
        String pasajeroValue = "";
        try (Connection conexion = DriverManager.getConnection(URL, USER, PASS)) {
            if (!flag) {
                // Separa el contenido del string
                String[] partes = val.split("-");
                String digitpass = partes[0].trim();
                String nompas = partes[1].trim();
                String Query = "SELECT idPasajero FROM InfoPasajero.Pasajero WHERE NumPasaporte LIKE '%" + digitpass + "' AND Nom_Pasajero = '" + nompas + "'";

                PreparedStatement pstmt = conexion.prepareStatement(Query);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    pasajeroValue = rs.getString("idPasajero");
                }
            } else {
                String Query = "SELECT Nom_Pasajero, NumPasaporte FROM InfoPasajero.Pasajero WHERE idPasajero=" + val;
                PreparedStatement pstmt = conexion.prepareStatement(Query);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    String digitnumpass = rs.getString("NumPasaporte").substring(rs.getString("NumPasaporte").length() - 4);
                    pasajeroValue = digitnumpass + " - " + rs.getString("Nom_Pasajero");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return pasajeroValue;
    }
    
    /**
     * Maneja el evento cuando se presiona una tecla en el campo de número de tarjeta de pasajero.
     * Solo permite dígitos y limita la longitud a 16 caracteres.
     */
    private void tb_NumTarPasajeroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_NumTarPasajeroKeyTyped
        char c = evt.getKeyChar();
        // Verificar si el carácter es un número o la tecla de borrar
        if (!Character.isDigit(c) && c != '\b') {
            evt.consume(); // Consumir el evento si no es un número o la tecla de borrar
        }

        // Verificar si ya hay 10 caracteres en el campo
        if (tb_NumTarPasajero.getText().length() >= 16) {
            evt.consume(); // Consumir el evento si ya hay 16 caracteres
        }
    }//GEN-LAST:event_tb_NumTarPasajeroKeyTyped

    /**
     * Maneja el evento cuando se presiona una tecla en el campo de CVV de tarjeta de pasajero.
     * Solo permite dígitos y limita la longitud a 3 caracteres.
     */
    private void tb_CVVTarPasajeroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_CVVTarPasajeroKeyTyped
        char c = evt.getKeyChar();
        // Verificar si el carácter es un número o la tecla de borrar
        if (!Character.isDigit(c) && c != '\b') {
            evt.consume(); // Consumir el evento si no es un número o la tecla de borrar
        }

        // Verificar si ya hay 10 caracteres en el campo
        if (tb_CVVTarPasajero.getText().length() >= 3) {
            evt.consume(); // Consumir el evento si ya hay 3 caracteres
        }
    }//GEN-LAST:event_tb_CVVTarPasajeroKeyTyped

    /**
     * Maneja el evento cuando se presiona una tecla en el campo de fecha de vencimiento de tarjeta de pasajero.
     * Asegura que solo se ingresen dígitos y diagonal y verifica el formato MM/yy.
     */
    private void TF_FechaVenTarPasajeroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TF_FechaVenTarPasajeroKeyTyped
        char c = evt.getKeyChar();
        String fechaActual = TF_FechaVenTarPasajero.getText();

        // Asegura que solo se ingresen dígitos y diagonal
        if (!Character.isDigit(c) && c != '/' || fechaActual.length() >= 7) {
            evt.consume();
        }

        // Verifica el formato MM/yy
        if (Character.isDigit(c) && fechaActual.length() == 2) {
            int mes = Integer.parseInt(fechaActual);
            if (mes < 1 || mes > 12) {
                evt.consume();
            } else {
                TF_FechaVenTarPasajero.setText(fechaActual + "/");
            }
        }

        // Asegura que solo haya un slash y se encuentre en la posición correcta
        if (c == '/' && (fechaActual.contains("/") || fechaActual.length() >= 7)) {
            evt.consume();
        }
    }//GEN-LAST:event_TF_FechaVenTarPasajeroKeyTyped

    /**
     * Maneja el evento cuando se hace clic en la tabla de tarjetas de pasajero.
     * Muestra los detalles de la tarjeta de pasajero seleccionada en los campos de entrada.
     */
    private void JT_TarPasajeroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JT_TarPasajeroMouseClicked
        lbl_Modifica.setVisible(true);
        btn_Agregar_TarPasajero.setEnabled(false);
        btn_Eliminar_TarPasajero.setEnabled(true);
        btn_Modificar_TarPasajero.setEnabled(true);
        btn_backTarPasajero.setEnabled(true);

        int filaSeleccionada = JT_TarPasajero.getSelectedRow();
        currentID = JT_TarPasajero.getValueAt(filaSeleccionada, 0).toString();
        String pasajero = JT_TarPasajero.getValueAt(filaSeleccionada, 1).toString();
        String nomtitular = JT_TarPasajero.getValueAt(filaSeleccionada, 2).toString();
        String numtarj = JT_TarPasajero.getValueAt(filaSeleccionada, 4).toString();
        String fechaven = JT_TarPasajero.getValueAt(filaSeleccionada, 5).toString();
        String cvv = JT_TarPasajero.getValueAt(filaSeleccionada, 6).toString();
        

        try {
            SimpleDateFormat formatoSalida = new SimpleDateFormat("MM/yyyy");
            SimpleDateFormat formatoEntrada = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date fecha = formatoEntrada.parse(fechaven);
            fechaven = formatoSalida.format(fecha);
        } catch (ParseException e) {
            e.printStackTrace();
        }

        tb_NombreTarPasajero.setText(nomtitular);
        tb_NumTarPasajero.setText(numtarj);
        tb_CVVTarPasajero.setText(cvv);
        TF_FechaVenTarPasajero.setText(fechaven);

        for (int i = 0; i < JCB_PasajeroTarPasajero.getItemCount(); i++) {
            String item = (String) JCB_PasajeroTarPasajero.getItemAt(i);

            if (item.equals(pasajero)) {
                JCB_PasajeroTarPasajero.setSelectedIndex(i);
                break;
            }
        }
    }//GEN-LAST:event_JT_TarPasajeroMouseClicked

    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="METODOS VENTANA ASIENTO">
    
    /**
     * Realiza una consulta a la base de datos para obtener los datos de los asientos
     * y actualiza el modelo de la tabla con los resultados.
     */
    public void ConsultaDatosAsiento() {
        try{
            CONN = ConnectBD();
            java.sql.Statement Stmnt = CONN.createStatement();
            String Query = "SELECT * FROM InfoPasajero.Asiento";
            String[]Data = new String[5];
            ResultSet Columns = Stmnt.executeQuery (Query);
            DefaultTableModel model = (DefaultTableModel) JT_Asiento.getModel();
            
            // Eliminar todas las filas existentes
            model.setRowCount(0);
            while(Columns.next())
            {
                Data[0]=Columns.getString(1);
                Data[1]=getItinerario(Columns.getString(2));
                Data[2]=Columns.getString(3);
                Data[3]=Columns.getString(4);
                Data[4]=Columns.getString(5);
                model.addRow(Data);
            }
            Stmnt.close();
            CONN.close();
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    /**
     * Obtiene la información del itinerario correspondiente al ID proporcionado.
     *
     * @param val El ID del itinerario.
     * @return Una cadena formateada con información del vuelo, hora de salida y fecha del itinerario.
     */
    private String getItinerario(String val) {
        String itinerarioValue = "";
        try (Connection conexion = DriverManager.getConnection(URL, USER, PASS); PreparedStatement pstmt = conexion.prepareStatement("SELECT idVuelo, HoraSalida, FechaVuelo FROM InfoAerolinea.Itinerario WHERE idItinerario="+val)) {
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    String horaCompleta = rs.getString("HoraSalida");
                    String horaSinSegundos = horaCompleta.substring(0, 5);

                    Date fecha = rs.getDate("FechaVuelo");
                    SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
                    String nuevaFecha = dateFormat.format(fecha);

                    itinerarioValue = "(" + getVuelo(rs.getString("idVuelo"), true) + ") - " + horaSinSegundos + " - " + nuevaFecha;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Manejo básico de la excepción. Puedes personalizarlo según tus necesidades.
        }

        return itinerarioValue;
    }

    /**
     * Llena el JComboBox de itinerarios con información de vuelo, hora de salida y fecha.
     * Guarda los ID de itinerario en una lista para referencia futura.
     */
    public void llenarCBAsiento() {
        try {
            Connection conexion = DriverManager.getConnection(URL, USER, PASS);
            Statement statement = conexion.createStatement();
            String query = "SELECT idItinerario, idVuelo, HoraSalida, FechaVuelo FROM InfoAerolinea.Itinerario";
            ResultSet rs = statement.executeQuery(query);

            while (rs.next()) {
                String horaCompleta = rs.getString("HoraSalida");
                String horaSinSegundos = horaCompleta.substring(0, 5);

                Date fecha = rs.getDate("FechaVuelo");
                SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
                String nuevaFecha = dateFormat.format(fecha);

                String item = "(" + getVuelo(rs.getString("idVuelo"), true) + ") - " + horaSinSegundos + " - " + nuevaFecha;
                JCB_ItinerarioAsiento.addItem(item);
                listIDItinerario.add(Integer.parseInt(rs.getString("idItinerario")));
            }

            rs.close();
            statement.close();
            conexion.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Restablece los campos de entrada y la interfaz después de realizar una operación en la sección de asientos.
     */
    private void btn_backAsientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backAsientoActionPerformed
        lbl_Modifica.setVisible(false);
        btn_Agregar_Asiento.setEnabled(true);
        btn_Eliminar_Asiento.setEnabled(false);
        btn_Modificar_Asiento.setEnabled(false);
        btn_backAsiento.setEnabled(false);
        
        JCB_ItinerarioAsiento.setSelectedIndex(-1); // Seleccionar "Ninguno"
        JCB_LetraAsiento.setSelectedIndex(-1); // Seleccionar "Ninguno"
        JS_NumAsiento.setValue(1);
        JCHBX_OcupadoAsiento.setSelected(false);

        currentID = "";
    }//GEN-LAST:event_btn_backAsientoActionPerformed

    /**
     * Agrega un nuevo asiento a la base de datos con los datos ingresados.
     * Actualiza la tabla después de la adición.
     */
    private void btn_Agregar_AsientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Agregar_AsientoActionPerformed
        if (JCB_ItinerarioAsiento.getSelectedIndex() == -1||JCB_LetraAsiento.getSelectedIndex() == -1) {
            String mensaje = "Ingresa correctamente los datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        
        String idIT = listIDItinerario.get(JCB_ItinerarioAsiento.getSelectedIndex()).toString();
        if (VerificarCupoItinerario(idIT)) {
            String query = JCHBX_OcupadoAsiento.isSelected()
                    ? "INSERT INTO InfoPasajero.Asiento (idItinerario, Num_Asiento, Letra, Ocupado) VALUES (" + idIT + ", " + JS_NumAsiento.getValue() + ", '" + JCB_LetraAsiento.getSelectedItem() + "', TRUE)"
                    : "INSERT INTO InfoPasajero.Asiento (idItinerario, Num_Asiento, Letra, Ocupado) VALUES (" + idIT + ", " + JS_NumAsiento.getValue() + ", '" + JCB_LetraAsiento.getSelectedItem() + "', FALSE)";

            if (Query1(query) == -1) {
                String mensaje = "Ocurrió una excepción: \nEse asiento ya existe";
                JOptionPane.showMessageDialog(null, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
            }

            ConsultaDatosAsiento();
            btn_backAsientoActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
        } else {
            String mensaje = "Ese itinerario ya está lleno";
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btn_Agregar_AsientoActionPerformed

    /**
     * Modifica un asiento en la base de datos con los nuevos datos ingresados.
     * Actualiza la tabla después de la modificación.
     */
    private void btn_Modificar_AsientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Modificar_AsientoActionPerformed
        if (currentID.equals("")||JCB_ItinerarioAsiento.getSelectedIndex() == -1||JCB_LetraAsiento.getSelectedIndex() == -1) {
            String mensaje = "Selecciona correctamente un registro y sus nuevos datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        
        String idIT = listIDItinerario.get(JCB_ItinerarioAsiento.getSelectedIndex()).toString();
        if (VerificarCupoItinerario(idIT) /*&& VerificarBoletoItinerario(currentID)*/) {
            String query = JCHBX_OcupadoAsiento.isSelected() ?
                        "UPDATE InfoPasajero.Asiento SET idItinerario = " + idIT + ", Num_Asiento = " + JS_NumAsiento.getValue() + ", Letra = '" + JCB_LetraAsiento.getSelectedItem() + "', Ocupado = TRUE WHERE idAsiento = " + currentID:
                        "UPDATE InfoPasajero.Asiento SET idItinerario = " + idIT + ", Num_Asiento = " + JS_NumAsiento.getValue() + ", Letra = '" + JCB_LetraAsiento.getSelectedItem() + "', Ocupado = FALSE WHERE idAsiento = " + currentID;

            if (Query1(query) == -1) {
                String mensaje = "Ocurrió una excepción: \nEse asiento ya existe, no se modificó";
                JOptionPane.showMessageDialog(null, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
            }

            ConsultaDatosAsiento();
            btn_backAsientoActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
        } else {
            String mensaje = "No se pudo modificar porque el nuevo itinerario ya esta lleno \no el asiento ya esta asociado a una venta-boleto";
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btn_Modificar_AsientoActionPerformed

    /**
     * Verifica si hay cupo disponible en el itinerario especificado.
     *
     * @param itinerario El ID del itinerario.
     * @return `true` si hay cupo disponible, `false` si está lleno.
     */
    private boolean VerificarCupoItinerario(String itinerario) {
        try (Connection conexion = DriverManager.getConnection(URL, USER, PASS)) {
            String consulta = "SELECT COUNT(*) FROM InfoPasajero.Asiento WHERE idItinerario = " + itinerario;
            try (PreparedStatement pstmt = conexion.prepareStatement(consulta)) {
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    int count = rs.getInt(1);
                    return count == 0 || count < 8;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * Verifica si un asiento está asociado a un boleto en la tabla de boletos.
     *
     * @param asiento El ID del asiento.
     * @return `true` si el asiento está asociado a un boleto, `false` si no.
     */
    private boolean VerificarBoletoItinerario(String asiento) {
        try (Connection conexion = DriverManager.getConnection(URL, USER, PASS)) {
            String consulta = "SELECT COUNT(*) FROM InfoPasajero.Boleto WHERE idAsiento = " + asiento;
            try (PreparedStatement pstmt = conexion.prepareStatement(consulta)) {
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    int count = rs.getInt(1);
                    return count == 0;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * Elimina un asiento de la base de datos según el ID actualmente seleccionado.
     * Actualiza la tabla después de la eliminación.
     */
    private void btn_Eliminar_AsientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eliminar_AsientoActionPerformed
        if (currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        String query = "DELETE FROM InfoPasajero.Asiento WHERE idAsiento = " + currentID;
        if (Query1(query) == -1) {
            String mensaje = "No se pudo eliminar porque aparece \ncomo clave foranea en otra tabla";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        ConsultaDatosAsiento();
        btn_backAsientoActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Eliminar_AsientoActionPerformed

    /**
     * Maneja el evento cuando se hace clic en la tabla de asientos.
     * Muestra los detalles del asiento seleccionado en los campos de entrada.
     */
    private void JT_AsientoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JT_AsientoMouseClicked
        lbl_Modifica.setVisible(true);
        btn_Agregar_Asiento.setEnabled(false);
        btn_Eliminar_Asiento.setEnabled(true);
        btn_Modificar_Asiento.setEnabled(true);
        btn_backAsiento.setEnabled(true);

        int filaSeleccionada = JT_Asiento.getSelectedRow();
        currentID = JT_Asiento.getValueAt(filaSeleccionada, 0).toString();
        String itinerario = JT_Asiento.getValueAt(filaSeleccionada, 1).toString();
        String numasiento = JT_Asiento.getValueAt(filaSeleccionada, 2).toString();
        String letra = JT_Asiento.getValueAt(filaSeleccionada, 3).toString();
        String ocupado = JT_Asiento.getValueAt(filaSeleccionada, 4).toString();

        int valorEntero = Integer.parseInt(numasiento);
        JS_NumAsiento.setValue(valorEntero);
        
        if(ocupado.equals("f"))
        {
            JCHBX_OcupadoAsiento.setSelected(false);
        }else
        {
            JCHBX_OcupadoAsiento.setSelected(true);
        }

        for (int i = 0; i < JCB_ItinerarioAsiento.getItemCount(); i++) {
            String item = (String) JCB_ItinerarioAsiento.getItemAt(i);

            if (item.equals(itinerario)) {
                JCB_ItinerarioAsiento.setSelectedIndex(i);
                break;
            }
        }
        
        for (int i = 0; i < JCB_LetraAsiento.getItemCount(); i++) {
            String item = (String) JCB_LetraAsiento.getItemAt(i);

            if (item.equals(letra)) {
                JCB_LetraAsiento.setSelectedIndex(i);
                break;
            }
        }
    }//GEN-LAST:event_JT_AsientoMouseClicked

    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="METODOS VENTANA VENTA">
    
    /**
     * Método invocado al hacer clic en el botón de retroceso en la interfaz de usuario.
     * Restaura la interfaz a su estado inicial.
     */
    private void btn_backVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backVentaActionPerformed
        lbl_Modifica.setVisible(false);
        btn_Agregar_Venta.setEnabled(true);
        btn_Eliminar_Venta.setEnabled(false);
        btn_Modificar_Venta.setEnabled(false);
        btn_backVenta.setEnabled(false);
        JS_NumBoletos.setEnabled(true);
        JS_IVABoleto.setEnabled(true);
        tb_TSBoleto.setEnabled(true);
        tb_TSRBoleto.setEnabled(true);

        JCB_ItinerarioVenta.setSelectedIndex(-1);
        JCB_TarjetaVenta.setSelectedIndex(-1);
        JS_NumBoletos.setValue(1);
        JCHBX_PagadoVenta.setSelected(false);

        currentID = "";
    }//GEN-LAST:event_btn_backVentaActionPerformed

    /**
     * Método invocado al hacer clic en el botón para agregar una venta en la base de datos.
     * Realiza la validación de entrada y agrega la venta a la base de datos.
     */
    private void btn_Agregar_VentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Agregar_VentaActionPerformed
        if (JCB_TarjetaVenta.getSelectedIndex() == -1||JCB_ItinerarioVenta.getSelectedIndex() == -1) {
            String mensaje = "Ingresa correctamente los datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        String idIT = listIDItinerario.get(JCB_ItinerarioVenta.getSelectedIndex()).toString();
        String idTP = listIDTrjetaPasajero.get(JCB_TarjetaVenta.getSelectedIndex()).toString();
        String query = JCHBX_PagadoVenta.isSelected()?
                        "INSERT INTO InfoPasajero.Venta (idTarjetaPasajero, idItinerario, MontoTotal, EstadoPago) VALUES (" + idTP + ", " + idIT + ", " + 0 + ", TRUE)" :
                        "INSERT INTO InfoPasajero.Venta (idTarjetaPasajero, idItinerario, MontoTotal, EstadoPago) VALUES (" + idTP + ", " + idIT + ", " + 0 + ", FALSE)";
        
        if (VerificarDispAsientos(idIT, Integer.parseInt(JS_NumBoletos.getValue().toString())) && JS_IVABoleto.getValue() != null && !tb_TSBoleto.toString().equals("") && !tb_TSRBoleto.toString().equals(""))
        {
            int idVenta = Query2(query,"idVenta");
            //System.out.println(idVenta);
            String CostVuel = getCostoBaseVuelo(idIT);
            CostVuel = CostVuel.replaceAll("[\\$,]", "");
            if(idVenta!=-1)
            {
                if (!insertarBoletos(idVenta, idIT, idTP, CostVuel, Integer.parseInt(JS_NumBoletos.getValue().toString())))
                {
                    String mensaje = "Ocurrió una excepción: \nNo se pudo insertar los boletos";
                    int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
                    JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
                    return;
                }
                ConsultaVenta();
                btn_backVentaActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
            }else
            {
                String mensaje = "Ocurrió una excepción: \nNo se pudo insertar porque no es posible tener dos ventas\ndel mismo pasajero en el mismo itinerario";
                int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
                JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
                return;
            }
        }else
        {
            String mensaje = "Ocurrió una excepción: \nNo se pudo insertar porque no hay suficientes asientos disponibles";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
    }//GEN-LAST:event_btn_Agregar_VentaActionPerformed

    /**
     * Verifica si hay suficientes asientos disponibles para una venta.
     *
     * @param idIT          ID del itinerario.
     * @param numAsientos   Número de asientos deseados.
     * @return              true si hay suficientes asientos, false de lo contrario.
     */
    public boolean VerificarDispAsientos(String idIT, int numAsientos) {
        try (Connection conexion = DriverManager.getConnection(URL, USER, PASS)) {
            String consulta = "SELECT COUNT(*) FROM InfoPasajero.Asiento WHERE idItinerario = "+idIT+" AND Ocupado = FALSE";
            try (PreparedStatement pstmt = conexion.prepareStatement(consulta)) {
                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        int count = rs.getInt(1);
                        return count >= numAsientos;
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false; // Retorna false en caso de error
    }
    
    /**
     * Obtiene el costo base de un vuelo asociado a un itinerario específico.
     *
     * @param idIT ID del itinerario del cual se desea obtener el costo base del vuelo.
     * @return Costo base del vuelo asociado al itinerario o null en caso de error.
     */
    private String getCostoBaseVuelo(String idIT) {
        try (Connection conexion = DriverManager.getConnection(URL, USER, PASS)) {
            String consulta = "SELECT V.CostoBase FROM InfoAerolinea.Itinerario I JOIN InfoAerolinea.Vuelo V ON I.idVuelo = V.idVuelo WHERE I.idItinerario = "+idIT;
            try (PreparedStatement pstmt = conexion.prepareStatement(consulta)) {
                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        String costoBase = rs.getString("CostoBase");
                        return costoBase;
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null; // Retorna null en caso de error
    }
    
    /**
     * Inserta boletos asociados a una venta en la base de datos.
     *
     * @param idVenta ID de la venta a la cual se asociarán los boletos.
     * @param idIT ID del itinerario del vuelo.
     * @param idTP ID de la tarjeta de pasajero.
     * @param costVuel Costo base del vuelo.
     * @param numBoletos Número de boletos a ser insertados.
     * @return true si la inserción fue exitosa, false en caso contrario.
     */
    public boolean insertarBoletos(int idVenta, String idIT, String idTP, String costVuel, int numBoletos) {
        float costV = Float.parseFloat(costVuel);
        float Impuestos = costV * Float.parseFloat("0." + JS_IVABoleto.getValue().toString());
        float TarAd = Float.parseFloat(tb_TSBoleto.getText()) + Float.parseFloat(tb_TSRBoleto.getText());
        float CostTot = costV + Impuestos + TarAd;
        try {
            Connection conn = DriverManager.getConnection(URL, USER, PASS);
            String query;
            String idPasajero = "";
            String idAsiento = "";
            
            query = "SELECT idPasajero FROM InfoPasajero.TarjetaPasajero WHERE idTarjetaPasajero = "+idTP;
            try (PreparedStatement pstmt = conn.prepareStatement(query); ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    idPasajero = rs.getString("idPasajero");
                }
            }
            
            for (int i = 0; i < numBoletos; i++) {
                query = "SELECT idAsiento, Ocupado FROM InfoPasajero.Asiento WHERE idItinerario = " + idIT;
                try (PreparedStatement stmt = conn.prepareStatement(query); ResultSet asientos = stmt.executeQuery()) {
                    while (asientos.next()) {
                        if (asientos.getString("Ocupado").equals("f")) {
                            idAsiento = asientos.getString("idAsiento");
                            break;
                        }
                    }
                }
                System.out.println(idPasajero+"-"+idAsiento);
                query = "INSERT INTO InfoPasajero.Boleto (idVenta, idPasajero, idAsiento, Impuestos, TarifasAdicionales, CostoTotal, Estado) VALUES ("+ idVenta + ", NULL, " + idAsiento + ", "+Impuestos+", "+TarAd+", "+CostTot+", TRUE)";
                PreparedStatement insertBoleto = conn.prepareStatement(query);
                insertBoleto.executeUpdate();
            }
            return true;
        }catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
            return false;
        }
    }

    /**
     * Método invocado al hacer clic en el botón para modificar una venta en la interfaz de usuario.
     * Realiza la validación de entrada, modifica la venta en la base de datos y actualiza la interfaz.
     */
    private void btn_Modificar_VentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Modificar_VentaActionPerformed
        if (currentID.equals("")||JCB_TarjetaVenta.getSelectedIndex() == -1||JCB_ItinerarioVenta.getSelectedIndex() == -1) {
            String mensaje = "Selecciona correctamente un registro y sus nuevos datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        String idIT = listIDItinerario.get(JCB_ItinerarioVenta.getSelectedIndex()).toString();
        String idTP = listIDTrjetaPasajero.get(JCB_TarjetaVenta.getSelectedIndex()).toString();
        int numBoletos = CountBoletosCurrentID();
        DefaultTableModel model = (DefaultTableModel) JT_Venta.getModel();
        int selectedRow = JT_Venta.getSelectedRow();
        String itinerarioSelectedRow = model.getValueAt(selectedRow, model.findColumn("Itinerario")).toString();
        
        if (VerificarDispAsientos(idIT, numBoletos)|| itinerarioSelectedRow == JCB_ItinerarioVenta.getSelectedItem().toString())
        {
            String query = JCHBX_PagadoVenta.isSelected()?
                        "UPDATE InfoPasajero.Venta SET idTarjetaPasajero="+idTP+", idItinerario="+idIT+", MontoTotal=0, EstadoPago=TRUE WHERE idVenta="+currentID:
                        "UPDATE InfoPasajero.Venta SET idTarjetaPasajero=" + idTP + ", idItinerario=" + idIT + ", MontoTotal=0, EstadoPago=FALSE WHERE idVenta=" + currentID;
            if (Query1(query)!=-1)
            {
                BorrarBoletos(currentID);
                query = "UPDATE InfoPasajero.Venta SET MontoTotal=0 WHERE idVenta=" + currentID;
                Query1(query);
                String CostVuel = getCostoBaseVuelo(idIT);
                CostVuel = CostVuel.replaceAll("[\\$,]", "");
                int id = Integer.parseInt(currentID);
                
                if (!insertarBoletos(id, idIT, idTP, CostVuel, numBoletos))
                {
                    String mensaje = "Ocurrió una excepción: \nNo se pudo insertar los boletos";
                    int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
                    JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
                    return;
                }
                ConsultaVenta();
                btn_backVentaActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
            }

        }else{
            String mensaje = "Ocurrió una excepción: \nNo se pudo modificar porque no hay suficientes asientos disponibles";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
    }//GEN-LAST:event_btn_Modificar_VentaActionPerformed

    /**
     * Obtiene el número de boletos asociados a la venta actual.
     *
     * @return Número de boletos asociados a la venta actual.
     */
    private int CountBoletosCurrentID() {
        try (Connection conexion = DriverManager.getConnection(URL, USER, PASS)) {
            String consulta = "SELECT COUNT(*) FROM InfoPasajero.Boleto WHERE idVenta = " + currentID;
            try (PreparedStatement pstmt = conexion.prepareStatement(consulta)) {
                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        int count = rs.getInt(1);
                        return count;
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0;
    }

    /**
     * Elimina los boletos asociados a una venta específica.
     *
     * @param currentID ID de la venta cuyos boletos se eliminarán.
     */
    private void BorrarBoletos(String currentID) {
        try {
            Connection conn = DriverManager.getConnection(URL, USER, PASS);
            String query = "DELETE FROM InfoPasajero.Boleto WHERE idVenta = " + currentID;
            PreparedStatement delBoleto = conn.prepareStatement(query);
            delBoleto.executeUpdate();
            delBoleto.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            return;
        }
    }
    
    /**
     * Método invocado al hacer clic en el botón para eliminar una venta en la interfaz de usuario.
     * Elimina la venta de la base de datos y actualiza la interfaz.
     */
    private void btn_Eliminar_VentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eliminar_VentaActionPerformed
        if (currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        
        String query = "DELETE FROM InfoPasajero.Venta WHERE idVenta = " + currentID;
        if (Query1(query) == -1) {
            String mensaje = "Ocurrió una excepción\nAún existen boletos asociados a esa venta";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        ConsultaVenta();
        btn_backVentaActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
    }//GEN-LAST:event_btn_Eliminar_VentaActionPerformed

    /**
     * Consulta las ventas y actualiza la tabla en la interfaz de usuario.
     */
    public void ConsultaVenta() {
        try {
            CONN = ConnectBD();
            java.sql.Statement Stmnt = CONN.createStatement();
            String Query = "SELECT * FROM InfoPasajero.Venta";
            String[] Data = new String[6];
            ResultSet Columns = Stmnt.executeQuery(Query);
            DefaultTableModel model = (DefaultTableModel) JT_Venta.getModel();

            // Eliminar todas las filas existentes
            model.setRowCount(0);
            while (Columns.next()) {
                Data[0] = Columns.getString(1);
                Data[1] = getTarjetaPasajero(Columns.getString(2));
                Data[2] = getItinerario(Columns.getString(3));
                Data[3] = Columns.getString(4);
                Data[4] = Columns.getString(5);
                Data[5] = Columns.getString(6);
                model.addRow(Data);
            }
            Stmnt.close();
            CONN.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    /**
     * Obtiene la información de la tarjeta de pasajero para mostrar en la interfaz.
     *
     * @param idTP ID de la tarjeta de pasajero.
     * @return Información de la tarjeta de pasajero formateada para mostrar en la interfaz.
     */
    private String getTarjetaPasajero(String idTP) {
        try (Connection conexion = DriverManager.getConnection(URL, USER, PASS)) {
            String consulta = "SELECT NombreTitular, NumTarjeta FROM InfoPasajero.TarjetaPasajero WHERE idTarjetaPasajero=" + idTP;
            try (PreparedStatement pstmt = conexion.prepareStatement(consulta)) {
                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        String numTarjeta = rs.getString("NumTarjeta");
                        String ultimosTresDigitos = numTarjeta.substring(numTarjeta.length() - 3);
                        String TarjPas = rs.getString("NombreTitular") + " - " + ultimosTresDigitos;
                        return TarjPas;
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null; // Retorna null en caso de error
    }
    
    /**
     * Llena los JComboBox con datos de la base de datos.
     */
    public void LlenarCBVenta() {
        try {
            Connection conn = DriverManager.getConnection(URL, USER, PASS);
            String query = "SELECT idItinerario, idVuelo, HoraSalida, FechaVuelo FROM InfoAerolinea.Itinerario";
            try (PreparedStatement pstmt = conn.prepareStatement(query); ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    String horaCompleta = rs.getString("HoraSalida");
                    String horaSinSegundos = horaCompleta.substring(0, 5);

                    Date fecha = rs.getDate("FechaVuelo");
                    SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
                    String nuevaFecha = dateFormat.format(fecha);

                    String item = "(" + getVuelo(rs.getString("idVuelo"), true) + ") - " + horaSinSegundos + " - " + nuevaFecha;
                    JCB_ItinerarioVenta.addItem(item);
                    listIDItinerario.add(rs.getInt("idItinerario"));
                }
            }

            query = "SELECT idTarjetaPasajero, NombreTitular, NumTarjeta FROM InfoPasajero.TarjetaPasajero";
            try (PreparedStatement pstmt = conn.prepareStatement(query); ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    String numTarjeta = rs.getString("NumTarjeta");
                    String ultimosTresDigitos = numTarjeta.substring(numTarjeta.length() - 3);
                    JCB_TarjetaVenta.addItem(rs.getString("NombreTitular") + " - " + ultimosTresDigitos);
                    listIDTrjetaPasajero.add(rs.getInt("idTarjetaPasajero"));
                }
            }

            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Método invocado cuando se presiona una tecla en el campo de texto tb_TSBoleto.
     * Permite la entrada solo de dígitos y limita la longitud del texto.
     */
    private void tb_TSBoletoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_TSBoletoKeyTyped
        char c = evt.getKeyChar();
        // Verificar si el carácter es un número o la tecla de borrar
        if (!Character.isDigit(c) && c != '\b') {
            evt.consume(); // Consumir el evento si no es un número o la tecla de borrar
        }

        // Verificar si ya hay 10 caracteres en el campo
        if (tb_TSBoleto.getText().length() >= 10) {
            evt.consume(); // Consumir el evento si ya hay 10 caracteres
        }
    }//GEN-LAST:event_tb_TSBoletoKeyTyped

    /**
     * Método invocado cuando se presiona una tecla en el campo de texto tb_TSRBoleto.
     * Permite la entrada solo de dígitos y limita la longitud del texto.
     */
    private void tb_TSRBoletoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_TSRBoletoKeyTyped
        char c = evt.getKeyChar();
        // Verificar si el carácter es un número o la tecla de borrar
        if (!Character.isDigit(c) && c != '\b') {
            evt.consume(); // Consumir el evento si no es un número o la tecla de borrar
        }

        // Verificar si ya hay 10 caracteres en el campo
        if (tb_TSRBoleto.getText().length() >= 10) {
            evt.consume(); // Consumir el evento si ya hay 10 caracteres
        }
    }//GEN-LAST:event_tb_TSRBoletoKeyTyped

    /**
     * Método invocado al hacer clic en una fila de la tabla de ventas en la interfaz de usuario.
     * Actualiza la interfaz para permitir la modificación o eliminación de la venta seleccionada.
     */
    private void JT_VentaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JT_VentaMouseClicked
        lbl_Modifica.setVisible(true);
        btn_Agregar_Venta.setEnabled(false);
        btn_Eliminar_Venta.setEnabled(true);
        btn_Modificar_Venta.setEnabled(true);
        btn_backVenta.setEnabled(true);
        JS_NumBoletos.setEnabled(false);
        JS_IVABoleto.setEnabled(false);
        tb_TSBoleto.setEnabled(false);
        tb_TSRBoleto.setEnabled(false);

        int filaSeleccionada = JT_Venta.getSelectedRow();
        currentID = JT_Venta.getValueAt(filaSeleccionada, 0).toString();
        String tarjeta = JT_Venta.getValueAt(filaSeleccionada, 1).toString();
        String itinerario = JT_Venta.getValueAt(filaSeleccionada, 2).toString();
        String pagado = JT_Venta.getValueAt(filaSeleccionada, 5).toString();


        if(pagado.equals("f"))
        {
            JCHBX_PagadoVenta.setSelected(false);
        }else
        {
            JCHBX_PagadoVenta.setSelected(true);
        }
        
        for (int i = 0; i < JCB_TarjetaVenta.getItemCount(); i++) {
            String item = (String) JCB_TarjetaVenta.getItemAt(i);

            if (item.equals(tarjeta)) {
                JCB_TarjetaVenta.setSelectedIndex(i);
                break;
            }
        }

        for (int i = 0; i < JCB_ItinerarioVenta.getItemCount(); i++) {
            String item = (String) JCB_ItinerarioVenta.getItemAt(i);

            if (item.equals(itinerario)) {
                JCB_ItinerarioVenta.setSelectedIndex(i);
                break;
            }
        }
    }//GEN-LAST:event_JT_VentaMouseClicked

    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="METODOS VENTANA BOLETO">
    
    /**
     * Llena los elementos JComboBox con información relacionada a los boletos, como asientos y pasajeros disponibles.
     *
     * @param Asiento ID del asiento para el cual se deben llenar los JComboBox.
     */
    public void LlenarCBBoleto(String Asiento) {
        try {
            listIDAsiento.clear();
            Connection conn = DriverManager.getConnection(URL, USER, PASS);

            String itinerario = "";
            String query = "SELECT idItinerario FROM InfoPasajero.Asiento WHERE idAsiento=" + Asiento;
            try (PreparedStatement pstmt = conn.prepareStatement(query); ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    itinerario = rs.getString("idItinerario");
                }
            }

            query = "SELECT * FROM InfoPasajero.Asiento WHERE idItinerario="+ itinerario + " AND Ocupado=FALSE";
            try (PreparedStatement pstmt = conn.prepareStatement(query); ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    itinerario = getItinerario(rs.getString("idItinerario"));
                    Matcher matcher = Pattern.compile("\\(([^)]*)\\)").matcher(itinerario);
                    if (matcher.find()) {
                        itinerario = matcher.group(1);
                    }
                    JCB_AsientoBoleto.addItem(itinerario + " - " + rs.getString("Letra") + "-" + rs.getString("Num_Asiento"));
                    listIDAsiento.add(rs.getInt("idAsiento"));
                }
            }

            query = "SELECT Nom_Pasajero, NumPasaporte FROM InfoPasajero.Pasajero";
            try (PreparedStatement pstmt = conn.prepareStatement(query); ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    String digitnumpass = rs.getString("NumPasaporte").substring(rs.getString("NumPasaporte").length() - 4);
                    JCB_PasajeroBoleto.addItem(digitnumpass + " - " + rs.getString("Nom_Pasajero"));
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Realiza una consulta a la base de datos y actualiza la tabla de boletos en la interfaz gráfica.
     */
    public void ConsultaBoleto() {
        try {
            listIDAsiento2.clear();
            CONN = ConnectBD();
            java.sql.Statement Stmnt = CONN.createStatement();
            String Query = "SELECT * FROM InfoPasajero.Boleto";
            String[] Data = new String[8];
            ResultSet Columns = Stmnt.executeQuery(Query);
            DefaultTableModel model = (DefaultTableModel) JT_Boleto.getModel();

            // Eliminar todas las filas existentes
            model.setRowCount(0);
            while (Columns.next()) {
                Data[0] = Columns.getString(1);
                Data[1] = Columns.getString(2);
                if(Columns.getString(3)==null)
                {
                    Data[2] = "Por Capturar";
                }else
                {
                    Data[2] = getPasajero(Columns.getString(3), true);
                }
                listIDAsiento2.add(Integer.parseInt(Columns.getString(4)));
                Data[3] = getAsiento(Columns.getString(4));
                Data[4] = Columns.getString(5);
                Data[5] = Columns.getString(6);
                Data[6] = Columns.getString(7);
                Data[7] = Columns.getString(8);
                model.addRow(Data);
            }
            Stmnt.close();
            CONN.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    /**
     * Obtiene la representación de cadena de un asiento a partir de su ID.
     *
     * @param idAsiento ID del asiento.
     * @return Representación de cadena del asiento o null en caso de error.
     */
    private String getAsiento(String idasiento) {
        try (Connection conexion = DriverManager.getConnection(URL, USER, PASS)) {
            String consulta = "SELECT * FROM InfoPasajero.Asiento WHERE idAsiento=" + idasiento;
            try (PreparedStatement pstmt = conexion.prepareStatement(consulta)) {
                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        String itinerario = getItinerario(rs.getString("idItinerario"));
                        Matcher matcher = Pattern.compile("\\(([^)]*)\\)").matcher(itinerario);
                        if (matcher.find()) {
                            itinerario = matcher.group(1);
                        }
                        String asiento = itinerario + " - " + rs.getString("Letra") + "-" + rs.getString("Num_Asiento");
                        return asiento;
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null; // Retorna null en caso de error
    }
    
    /**
     * Realiza la actualización de un boleto en la base de datos según la selección del usuario en la interfaz gráfica.
     *
     * @param evt Evento de acción que desencadena la llamada al método.
     */
    private void btn_Modificar_BoletoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Modificar_BoletoActionPerformed
        if (currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        
        String query = "";

        if(JCB_AsientoBoleto.getSelectedIndex() != -1 && JCB_PasajeroBoleto.getSelectedIndex() != -1)
        {
            String idA = listIDAsiento.get(JCB_AsientoBoleto.getSelectedIndex()).toString();
            String idPas = getPasajero(JCB_PasajeroBoleto.getSelectedItem().toString(), false);
            query = JCHBX_EstadoBoleto.isSelected() ?
                "UPDATE InfoPasajero.Boleto SET idPasajero=" + idPas + ", idAsiento = " + idA + ", Estado = TRUE WHERE idBoleto = " +currentID :
                "UPDATE InfoPasajero.Boleto SET idPasajero=" + idPas + ", idAsiento = " + idA + ", Estado = FALSE WHERE idBoleto = " + currentID;
        }

        if(JCB_AsientoBoleto.getSelectedIndex() != -1 && JCB_PasajeroBoleto.getSelectedIndex() == -1)
        {
            String idA = listIDAsiento.get(JCB_AsientoBoleto.getSelectedIndex()).toString();
            query = JCHBX_EstadoBoleto.isSelected()?
                    "UPDATE InfoPasajero.Boleto SET idAsiento = " + idA + ", Estado = TRUE WHERE idBoleto = " + currentID :
                    "UPDATE InfoPasajero.Boleto SET idAsiento = " + idA + ", Estado = FALSE WHERE idBoleto = " + currentID;

        }

        if(JCB_AsientoBoleto.getSelectedIndex() == -1 && JCB_PasajeroBoleto.getSelectedIndex() != -1)
        {
            String idPas = getPasajero(JCB_PasajeroBoleto.getSelectedItem().toString(), false);
            query = JCHBX_EstadoBoleto.isSelected()?
                "UPDATE InfoPasajero.Boleto SET idPasajero=" + idPas + ", Estado = TRUE WHERE idBoleto = " + currentID :
                "UPDATE InfoPasajero.Boleto SET idPasajero=" + idPas + ", Estado = FALSE WHERE idBoleto = " + currentID;
        }

        if (JCB_AsientoBoleto.getSelectedIndex() == -1 && JCB_PasajeroBoleto.getSelectedIndex() == -1)
        {
            query = JCHBX_EstadoBoleto.isSelected() ?
                    "UPDATE InfoPasajero.Boleto SET Estado = TRUE WHERE idBoleto = " + currentID :
                    "UPDATE InfoPasajero.Boleto SET Estado = FALSE WHERE idBoleto = " + currentID;
        }
        
        if (Query1(query) == -1) {
            String mensaje = "No se pudo modificar";
            JOptionPane.showMessageDialog(null, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
        }

        ConsultaBoleto();
        backboleto();
    }//GEN-LAST:event_btn_Modificar_BoletoActionPerformed

    /**
     * Realiza la eliminación de un boleto en la base de datos según la selección del usuario en la interfaz gráfica.
     *
     * @param evt Evento de acción que desencadena la llamada al método.
     */
    private void btn_Eliminar_BoletoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Eliminar_BoletoActionPerformed
        if (currentID.equals("")) {
            String mensaje = "Selecciona correctamente un registro";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        
        String query = "DELETE FROM InfoPasajero.Boleto WHERE idBoleto = " + currentID;
        if (Query1(query) == -1) {
            String mensaje = "No se pudo eliminar";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        ConsultaBoleto();
        backboleto();
    }//GEN-LAST:event_btn_Eliminar_BoletoActionPerformed

    /**
     * Maneja el evento de clic del mouse en la tabla de boletos, actualizando los elementos de la interfaz gráfica
     * según la fila seleccionada en la tabla.
     *
     * @param evt Evento de clic del mouse.
     */
    private void JT_BoletoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JT_BoletoMouseClicked
        
        JCB_PasajeroBoleto.removeAllItems();
        JCB_AsientoBoleto.removeAllItems();
        JCB_PasajeroBoleto.setEnabled(true);
        JCB_AsientoBoleto.setEnabled(true);
        lbl_Modifica.setVisible(true);
        btn_Eliminar_Boleto.setEnabled(true);
        btn_Modificar_Boleto.setEnabled(true);
        JCHBX_EstadoBoleto.setEnabled(true);

        int filaSeleccionada = JT_Boleto.getSelectedRow();
        currentID = JT_Boleto.getValueAt(filaSeleccionada, 0).toString();
        String pasajero = JT_Boleto.getValueAt(filaSeleccionada, 1).toString();
        String asiento = JT_Boleto.getValueAt(filaSeleccionada, 2).toString();
        String estado = JT_Boleto.getValueAt(filaSeleccionada, 5).toString();


        if(estado.equals("f"))
        {
            JCHBX_EstadoBoleto.setSelected(false);
        }else
        {
            JCHBX_EstadoBoleto.setSelected(true);
        }
        
        String idAsiento = listIDAsiento2.get(JT_Boleto.getSelectedRow()).toString();
        LlenarCBBoleto(idAsiento);
        
        for (int i = 0; i < JCB_PasajeroBoleto.getItemCount(); i++) {
            String item = (String) JCB_PasajeroBoleto.getItemAt(i);
            if (item.equals(pasajero)) {
                JCB_PasajeroBoleto.setSelectedIndex(i);
                break;
            }
        }
        JCB_PasajeroBoleto.setSelectedIndex(-1);
        JCB_AsientoBoleto.setSelectedIndex(-1);
    }//GEN-LAST:event_JT_BoletoMouseClicked

    /**
     * Restaura la interfaz gráfica de boletos a su estado original, limpiando los elementos y deshabilitando
     * los controles correspondientes.
     */
    public void backboleto(){
        JCB_PasajeroBoleto.removeAllItems();
        JCB_AsientoBoleto.removeAllItems();
        JCB_PasajeroBoleto.setEnabled(false);
        JCB_AsientoBoleto.setEnabled(false);
        lbl_Modifica.setVisible(false);
        btn_Eliminar_Boleto.setEnabled(false);
        btn_Modificar_Boleto.setEnabled(false);
        JCHBX_EstadoBoleto.setEnabled(false);
        currentID = "";
    }
    
    // </editor-fold>
    
    // </editor-fold>
    
    /// Metodos para Ventana del reportes
    // <editor-fold defaultstate="collapsed" desc="Reportes">
    
    /**
     * Llena el ComboBox de pilotos en la interfaz gráfica, obteniendo la información desde la base de datos.
     */
    public void LlenarCBR1()
    {
        JCB_PilotoR1.removeAllItems();
        listNomPilotos.clear();
        try {
            Connection conn = DriverManager.getConnection(URL, USER, PASS);
            // Llenar ComboBox para Piloto
            String queryPiloto = "SELECT idPiloto, Nom_Piloto FROM InfoAerolinea.Piloto";
            try (PreparedStatement pstmtPiloto = conn.prepareStatement(queryPiloto); ResultSet rsPiloto = pstmtPiloto.executeQuery()) {
                while (rsPiloto.next()) {
                    JCB_PilotoR1.addItem(rsPiloto.getString("idPiloto") + " - " + rsPiloto.getString("Nom_Piloto"));
                    listNomPilotos.add(rsPiloto.getString("Nom_Piloto"));
                }
            }
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Maneja el evento de tecla presionada en el campo de texto de la interfaz gráfica.
     * Permite solo dígitos y un punto decimal, asegura que solo haya un punto decimal y permite solo dos decimales.
     *
     * @param evt Evento de tecla presionada.
     */
    private void tb_CostBaseR2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tb_CostBaseR2KeyTyped
        char c = evt.getKeyChar();

        // Permite solo dígitos y un punto decimal
        if (!Character.isDigit(c) && c != '.') {
            evt.consume();
        }

        // Asegura que solo haya un punto decimal
        if (c == '.' && tb_CostBaseR2.getText().contains(".")) {
            evt.consume();
        }

        // Permite solo dos decimales
        String text = tb_CostBaseR2.getText();
        if (text.contains(".") && text.split("\\.").length > 1 && text.split("\\.")[1].length() >= 2 && c != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }
    }//GEN-LAST:event_tb_CostBaseR2KeyTyped

    /**
     * Maneja el evento de clic en el botón de consulta en la interfaz gráfica.
     * Realiza una consulta en la base de datos según los criterios especificados por el usuario.
     *
     * @param evt Evento de clic en el botón.
     */
    private void Rep2_consultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Rep2_consultaActionPerformed
        if (JC_FechaR2.getDate() == null||tb_CostBaseR2.getText().equals("")) {
            String mensaje = "Ingresa correctamente los datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }
        
        try{
            CONN = ConnectBD();
            java.sql.Statement Stmnt = CONN.createStatement();
            
            JCalendar fecha = JC_FechaR2;
            Date fechaSeleccionada = new Date(fecha.getDate().getTime());
            String Query = JCHBX_PagadoR2.isSelected()?
                    "SELECT\n" +
                    "(\n" +
                    "        SELECT NombreTitular\n" +
                    "        FROM InfoPasajero.TarjetaPasajero\n" +
                    "        WHERE idTarjetaPasajero = V.idTarjetaPasajero\n" +
                    "    ) AS NombreTitular,\n" +
                    "V.MontoTotal,\n" +
                    "V.FechaVenta,\n" +
                    "I.idItinerario\n" +
                    "FROM\n" +
                    "InfoPasajero.Venta V\n" +
                    "INNER JOIN InfoAerolinea.Itinerario I ON V.idItinerario = I.idItinerario\n" +
                    "WHERE\n" +
                    "V.MontoTotal >= "+tb_CostBaseR2.getText()+"::money\n" +
                    "AND V.FechaVenta >= '"+fechaSeleccionada+"'\n" +
                    "AND V.EstadoPago = TRUE":
                    "SELECT\n" +
                    "(\n" +
                    "        SELECT NombreTitular\n" +
                    "        FROM InfoPasajero.TarjetaPasajero\n" +
                    "        WHERE idTarjetaPasajero = V.idTarjetaPasajero\n" +
                    "    ) AS NombreTitular,\n" +
                    "V.MontoTotal,\n" +
                    "V.FechaVenta,\n" +
                    "I.idItinerario\n" +
                    "FROM\n" +
                    "InfoPasajero.Venta V\n" +
                    "INNER JOIN InfoAerolinea.Itinerario I ON V.idItinerario = I.idItinerario\n" +
                    "WHERE\n" +
                    "V.MontoTotal >= "+tb_CostBaseR2.getText()+"::money\n" +
                    "AND V.FechaVenta >= '"+fechaSeleccionada+"'\n" +
                    "AND V.EstadoPago = FALSE";

            String[]Data = new String[5];
            ResultSet Columns = Stmnt.executeQuery (Query);
            DefaultTableModel model = (DefaultTableModel) JT_R2.getModel();

            // Eliminar todas las filas existentes
            model.setRowCount(0);
            while(Columns.next())
            {
                Data[0]=Columns.getString(1);
                Data[1]=Columns.getString(2);
                Data[2]=Columns.getString(3);
                Data[3]=getItinerario(Columns.getString(4));
                model.addRow(Data);
            }
            Stmnt.close();
            CONN.close();
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        tb_CostBaseR2.setText("");
    }//GEN-LAST:event_Rep2_consultaActionPerformed

    /**
     * Maneja el evento de clic en el botón de consulta en la interfaz gráfica.
     * Realiza una consulta en la base de datos según los criterios especificados por el usuario.
     *
     * @param evt Evento de clic en el botón.
     */
    private void Rep1_consultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Rep1_consultaActionPerformed
        if (!ValidarHora(TF_HoraSalIR1.getText())||JC_FechaR1.getDate() == null||TF_HoraSalIR1.getText().equals("")||JCB_PilotoR1.getSelectedIndex() == -1) {
            String mensaje = "Ingresa correctamente los datos";
            int tipoMensaje = JOptionPane.INFORMATION_MESSAGE;
            JOptionPane.showMessageDialog(null, mensaje, "Mensaje", tipoMensaje);
            return;
        }

        try{
            CONN = ConnectBD();
            java.sql.Statement Stmnt = CONN.createStatement();

            JCalendar fecha = JC_FechaR1;
            Date fechaSeleccionada = new Date(fecha.getDate().getTime());
            String nombrePiloto = listNomPilotos.get(JCB_PilotoR1.getSelectedIndex()).toString();

            String Query =
            "SELECT\n" +
            "P.Nom_Piloto,\n" +
            "I.HoraSalida,\n" +
            "I.FechaVuelo,\n" +
            "A.Modelo AS ModeloAvion,\n" +
            "V.DuracionHoras,\n" +
            "V.CostoBase,\n" +
            "(\n" +
            "        SELECT COUNT(I2.idItinerario)\n" +
            "        FROM InfoAerolinea.Itinerario AS I2\n" +
            "        WHERE I2.idPiloto = ( SELECT idPiloto FROM InfoAerolinea.Piloto WHERE Nom_Piloto = '"+nombrePiloto+"') AND I2.FechaVuelo >= '"+fechaSeleccionada+"' AND I2.HoraSalida >= '"+TF_HoraSalIR1.getText()+"'\n" +
            "    ) AS CantidadVuelos\n" +
            "FROM\n" +
            "InfoAerolinea.Piloto AS P\n" +
            "INNER JOIN\n" +
            "InfoAerolinea.Itinerario AS I ON P.idPiloto = I.idPiloto\n" +
            "INNER JOIN\n" +
            "InfoAerolinea.Avion AS A ON I.idAvion = A.idAvion\n" +
            "INNER JOIN\n" +
            "InfoAerolinea.Vuelo AS V ON I.idVuelo = V.idVuelo\n" +
            "WHERE\n" +
            "P.Nom_Piloto = '"+nombrePiloto+"' AND I.FechaVuelo >= '"+fechaSeleccionada+"' AND I.HoraSalida >= '"+TF_HoraSalIR1.getText()+"'\n" +
            "GROUP BY\n" +
            "P.Nom_Piloto, I.HoraSalida, I.FechaVuelo, A.Modelo, V.DuracionHoras, V.CostoBase;";

            String[]Data = new String[7];
            ResultSet Columns = Stmnt.executeQuery (Query);
            DefaultTableModel model = (DefaultTableModel) JT_R1.getModel();

            // Eliminar todas las filas existentes
            model.setRowCount(0);
            while(Columns.next())
            {
                Data[0]=Columns.getString(1);
                Data[1]=Columns.getString(2);
                Data[2]=Columns.getString(3);
                Data[3]=Columns.getString(4);
                Data[4]=Columns.getString(5);
                Data[5]=Columns.getString(6);
                JL_Count.setText("Registros encontrados: "+Columns.getString(7));
                model.addRow(Data);
            }
            Stmnt.close();
            CONN.close();
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

        JCB_PilotoR1.setSelectedIndex(-1);
        TF_HoraSalIR1.setText("00:00");
    }//GEN-LAST:event_Rep1_consultaActionPerformed

    /**
     * Maneja el evento de tecla presionada en el campo de texto de la interfaz gráfica.
     * Permite solo dígitos y dos puntos, verifica el formato HH:MM.
     *
     * @param evt Evento de tecla presionada.
     */
    private void TF_HoraSalIR1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TF_HoraSalIR1KeyTyped
        char c = evt.getKeyChar();
        String horaActual = TF_HoraSalIR1.getText();

        // Asegura que solo se ingresen dígitos y dos puntos
        if (!Character.isDigit(c) && c != ':' || horaActual.length() >= 5) {
            evt.consume();
        }

        // Verifica el formato HH:MM
        if (Character.isDigit(c) && horaActual.length() == 2) {
            TF_HoraSalIR1.setText(horaActual + ":");
        }

        // Asegura que solo haya un punto y se encuentre en la posición correcta
        if (c == ':' && (horaActual.contains(":") || horaActual.length() >= 5)) {
            evt.consume();
        }
    }//GEN-LAST:event_TF_HoraSalIR1KeyTyped

    // </editor-fold>
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AEROPUERTO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AEROPUERTO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AEROPUERTO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AEROPUERTO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AEROPUERTO().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> JCB_AerolineaAvion;
    private javax.swing.JComboBox<String> JCB_AsientoBoleto;
    private javax.swing.JComboBox<String> JCB_AvionItinerario;
    private javax.swing.JComboBox<String> JCB_CiudDestVuelo;
    private javax.swing.JComboBox<String> JCB_CiudOrgVuelo;
    private javax.swing.JComboBox<String> JCB_GeneroPasajero;
    private javax.swing.JComboBox<String> JCB_GeneroPiloto;
    private javax.swing.JComboBox<String> JCB_ItinerarioAsiento;
    private javax.swing.JComboBox<String> JCB_ItinerarioVenta;
    private javax.swing.JComboBox<String> JCB_LetraAsiento;
    private javax.swing.JComboBox<String> JCB_PasajeroBoleto;
    private javax.swing.JComboBox<String> JCB_PasajeroTarPasajero;
    private javax.swing.JComboBox<String> JCB_PilotoItinerario;
    private javax.swing.JComboBox<String> JCB_PilotoR1;
    private javax.swing.JComboBox<String> JCB_TarjetaVenta;
    private javax.swing.JComboBox<String> JCB_VueloItinerario;
    private javax.swing.JCheckBox JCHBX_ActivoAvion;
    private javax.swing.JCheckBox JCHBX_EstadoBoleto;
    private javax.swing.JCheckBox JCHBX_OcupadoAsiento;
    private javax.swing.JCheckBox JCHBX_PagadoR2;
    private javax.swing.JCheckBox JCHBX_PagadoVenta;
    private com.toedter.calendar.JCalendar JC_FechaNacPasajero;
    private com.toedter.calendar.JCalendar JC_FechaNacPiloto;
    private com.toedter.calendar.JCalendar JC_FechaR1;
    private com.toedter.calendar.JCalendar JC_FechaR2;
    private com.toedter.calendar.JCalendar JC_FechaVueloItinerario;
    private javax.swing.JLabel JL_Count;
    private javax.swing.JLabel JL_info;
    private javax.swing.JLabel JL_info1;
    private javax.swing.JSpinner JS_DuracionVuelo;
    private javax.swing.JSpinner JS_IVABoleto;
    private javax.swing.JSpinner JS_NumAsiento;
    private javax.swing.JSpinner JS_NumBoletos;
    private javax.swing.JTabbedPane JTP_Ventanas;
    private javax.swing.JTable JT_Aerolinea;
    private javax.swing.JTable JT_Asiento;
    private javax.swing.JTable JT_Avion;
    private javax.swing.JTable JT_Boleto;
    private javax.swing.JTable JT_Ciudad;
    private javax.swing.JTable JT_Itinerario;
    private javax.swing.JTable JT_Pasajero;
    private javax.swing.JTable JT_Piloto;
    private javax.swing.JTable JT_R1;
    private javax.swing.JTable JT_R2;
    private javax.swing.JTable JT_TarPasajero;
    private javax.swing.JTable JT_Venta;
    private javax.swing.JTable JT_Vuelo;
    private javax.swing.JButton Rep1_consulta;
    private javax.swing.JButton Rep2_consulta;
    private javax.swing.JTextField TF_FechaVenTarPasajero;
    private javax.swing.JTextField TF_HoraSalIR1;
    private javax.swing.JTextField TF_HoraSalItinerario;
    public javax.swing.JButton btn_Agregar_Aerolinea;
    public javax.swing.JButton btn_Agregar_Asiento;
    public javax.swing.JButton btn_Agregar_Avion;
    public javax.swing.JButton btn_Agregar_Ciudad;
    public javax.swing.JButton btn_Agregar_Itinerario;
    public javax.swing.JButton btn_Agregar_Pasajero;
    public javax.swing.JButton btn_Agregar_Piloto;
    public javax.swing.JButton btn_Agregar_TarPasajero;
    public javax.swing.JButton btn_Agregar_Venta;
    public javax.swing.JButton btn_Agregar_Vuelo;
    public javax.swing.JButton btn_Eliminar_Aerolinea;
    public javax.swing.JButton btn_Eliminar_Asiento;
    public javax.swing.JButton btn_Eliminar_Avion;
    public javax.swing.JButton btn_Eliminar_Boleto;
    public javax.swing.JButton btn_Eliminar_Ciudad;
    public javax.swing.JButton btn_Eliminar_Itinerario;
    public javax.swing.JButton btn_Eliminar_Pasajero;
    public javax.swing.JButton btn_Eliminar_Piloto;
    public javax.swing.JButton btn_Eliminar_TarPasajero;
    public javax.swing.JButton btn_Eliminar_Venta;
    public javax.swing.JButton btn_Eliminar_Vuelo;
    public javax.swing.JButton btn_Imagen;
    public javax.swing.JButton btn_Modificar_Aerolinea;
    public javax.swing.JButton btn_Modificar_Asiento;
    public javax.swing.JButton btn_Modificar_Avion;
    public javax.swing.JButton btn_Modificar_Boleto;
    public javax.swing.JButton btn_Modificar_Ciudad;
    public javax.swing.JButton btn_Modificar_Itinerario;
    public javax.swing.JButton btn_Modificar_Pasajero;
    public javax.swing.JButton btn_Modificar_Piloto;
    public javax.swing.JButton btn_Modificar_TarPasajero;
    public javax.swing.JButton btn_Modificar_Venta;
    public javax.swing.JButton btn_Modificar_Vuelo;
    public javax.swing.JButton btn_backAerolinea;
    public javax.swing.JButton btn_backAsiento;
    public javax.swing.JButton btn_backAvion;
    public javax.swing.JButton btn_backCiudad;
    public javax.swing.JButton btn_backItinerario;
    public javax.swing.JButton btn_backPasajero;
    public javax.swing.JButton btn_backPiloto;
    public javax.swing.JButton btn_backTarPasajero;
    public javax.swing.JButton btn_backVenta;
    public javax.swing.JButton btn_backVuelo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbl_Modifica;
    private javax.swing.JLabel lbl_image;
    private javax.swing.JTextField tb_AnioFAero;
    private javax.swing.JTextField tb_AnioFAvion;
    private javax.swing.JTextField tb_CVVTarPasajero;
    private javax.swing.JTextField tb_ContEmergenciaPasajero;
    private javax.swing.JTextField tb_CostBaseR2;
    private javax.swing.JTextField tb_CostBaseVuelo;
    private javax.swing.JTextField tb_EmailPasajero;
    private javax.swing.JTextField tb_Image;
    private javax.swing.JTextField tb_ModeloAvion;
    private javax.swing.JTextField tb_NacionalidadPasajero;
    private javax.swing.JTextField tb_NombreAero;
    private javax.swing.JTextField tb_NombreCiudad;
    private javax.swing.JTextField tb_NombrePasajero;
    private javax.swing.JTextField tb_NombrePiloto;
    private javax.swing.JTextField tb_NombreTarPasajero;
    private javax.swing.JTextField tb_NumLicPiloto;
    private javax.swing.JTextField tb_NumPassPasajero;
    private javax.swing.JTextField tb_NumTarPasajero;
    private javax.swing.JTextField tb_NumTelPasajero;
    private javax.swing.JTextField tb_PaisCiudad;
    private javax.swing.JTextField tb_TSBoleto;
    private javax.swing.JTextField tb_TSRBoleto;
    // End of variables declaration//GEN-END:variables

}
